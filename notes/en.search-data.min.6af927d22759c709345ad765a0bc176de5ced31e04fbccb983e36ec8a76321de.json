[{"id":0,"href":"/notes/books/ddia/chapter-1/","title":"Chapter 1: Foundations of Data Systems","section":"Designing Data-Intensive Applications","content":" Foundations of Data Systems # 3 Important Characteristics of Data Systems # Reliability: System should continue to work correctly even in the face of adversity and maintain same perf levels Scalability: As the system grows, there should be reasonable ways to deal with the growth Maintainability: Different people should be able to work on it productively across time Reliability # This can include:\nPerforming expected functions correctly Tolerate user mistakes or unexpected inputs Maintain good enough performance under load Prevent unauthorized access and abuse Types of faults:\nHardware -\u0026gt; Typically mitigated by redundant hardware Software -\u0026gt; Typically mitigated by thinking upfront about design and careful testing Human error -\u0026gt; Typically mitigated by careful design and testing Scalability # This is system\u0026rsquo;s ability to cope with increased load.\nLoad -\u0026gt; Can be described with the help of numbers we can call as load parameters. The parameters would depend on the system architecture. E.g.:\nWeb server -\u0026gt; Number of requests per second Database -\u0026gt; Number of read/write operations per second or read to write ratio Chat Room -\u0026gt; Simultaneously active users Cache -\u0026gt; Hit/miss rate Twitter Example # Tweet post rate -\u0026gt; 4.6K RPS average, 12K RPS peak Home TL View -\u0026gt; 300k RPS average\nOption 1:\nInsert each posted tweet to a global collection. When a user views their TL, fetch all their followee\u0026rsquo;s tweets and merge them. Simple but slow due to all the joins.\nOption 2:\nMaintain a cache for each user\u0026rsquo;s TL. On a tweet post, update TL cache for all followers of tweet poster. This approach is fast on read but can become very expensive for people with large following. E.g. a user with 30 mn followers would mean 30mn writes per tweet.\nFinal Solution used at twitter: Hybrid approach of above 2. For most users, do 2nd option. For users with high number of followers (e.g. celebs), do option 1 (i.e. their tweets get merged into the caches at view time).\nPerformance # Batch processing systems (e.g. Hadoop) care more about throughput while online systems care more about response time.\nLatency -\u0026gt; duration where request is waiting to be handled\nResponse time -\u0026gt; Total time spent in serving a request that a client sees (thus, including latency)\nResponse time is not a single number but a distribution since you\u0026rsquo;d get slightly different response times for every request. A good metric to use while reporting perf data like response time is percentiles, not averages. This is because averages can hide outliers and also don\u0026rsquo;t tell about how many users experienced a given response time.\nMedian (P50), P95, P99 etc are good metrics. High percentiles of response times are also called tail latencies.\nNote: Amazon describes response time requirements for internal services in terms of P99.9, even though it affects only 1 in 1000 requests. Because often those are the users with most data because they\u0026rsquo;ve made most purchases.\nAmazon observes that a 100ms increase in response time for a request reduces sales by 1%. Others report that a 1 second slow down reduces customer satisfaction by 16%.\nNote that trying to satisfy too high tail latencies is also not useful so there should be a balance of ROI.\nQueueing delays are also known as head of line blocking.\nLoad Test -\u0026gt; Should keep generating and sending requests without waiting for previous response to finish, to simulate the behavior of a real system where there could be queueing delays.\nTail latency amplification -\u0026gt; When a user request results in multiple backend calls, even 1 slow call slows down the whole response \u0026amp; there\u0026rsquo;s a high chance of several users experiencing this.\nApproaches for coping with load:\nVertical scaling -\u0026gt; Increase the resources of a single machine Horizontal scaling -\u0026gt; Distribute load across multiple smaller machines. Also called shared-nothing architecture. Good architectures employ a pragmatic mix of both. Elasticity, or automatic scaling, is useful for unpredictable loads.\nMaintainability # 3 Design Principles:\nOperability -\u0026gt; Making life easy for operations Simplicity -\u0026gt; Managing complexity Evolvability -\u0026gt; Making change easy Accidental Complexity -\u0026gt; Complexity is accidental if it is not inherent in the problem that the software solves, but arises only from the implementation. Abstractions can help reduce accidental complexity. High level programming languages are abstractions too.\n"},{"id":1,"href":"/notes/travel/china/","title":"China","section":"Travel","content":"Primary Cities covered: Shanghai\nGeneral # Apps to install:\nAlipay Can pay for food, taxis, etc or even online payments. Didi (Chinese Uber) and Metro/Bus tickets are integrated. Don\u0026rsquo;t need their separate apps. Indian credit cards work. May trigger fraud alert on Alipay side. If so, they may ask you to send a photo of your credit card (with some part of number hidden) etc. Change iPhone account region to some country other than India to be able to install from app store. For Android, can install apk from internet. Can switch back to India region after installation. WeChat (Not preferred since it needs someone to invite you) Baidu maps. Google maps are not that good (even if you make them work with vpn). Apple maps are passable if you can\u0026rsquo;t understand Baidu maps. Transportation # Airport to city taxi can be tricky Easy to get Didi, but they may not be able to find you where you are at the airport, and hard to communicate since they only speak chinese. Local taxi drivers will try to rip you off Best to book a hotel shuttle or from klook etc Otherwise didi is easy to book in the city, or from city to airport Metro is easy to use and cheap Food # Vegetarian food is not that common in Shanghai, but look for Buddhist restaurants or vegan restaurants. Shopping # Very few people shop offline in Shanghai and everybody orders from TaoBao Hard for foreigners to buy from taobao. May need help from a local. Attractions # Visa / Paperwork # Need to physically visit Mumbai VFS to get visa. Data / Phone # Physical sim available at the airport. Google etc and most non-china sites/apps dont work on this until you connect a vpn Google and all other non-china sites/apps will work on your roaming pack on home country sim Can buy a HK sim/eSim as well to use locally which also works for google etc. Money # Alipay is used everywhere. Not much cash needed but keep some for emergency if it doesn\u0026rsquo;t work. Credit card usage is not that common "},{"id":2,"href":"/notes/books/ddia/","title":"Designing Data-Intensive Applications","section":"Books","content":" Designing Data-Intensive Applications # Notes on the book by Martin Kleppmann. Click on the chapter links on the sidebar to view the notes.\nChapter 1: Foundations of Data Systems Chapter 2: Data Models and Query Languages "},{"id":3,"href":"/notes/travel/hongkong/","title":"Hong Kong","section":"Travel","content":" General # Transportation # Take an Oyster card for the metro Can be refilled only via cash. But can be done at MRT stations as well as 7/11 stores Can also be used for paying at various shops Can tap credit card directly for the bus Food # Not many options for vegetarians, but you will be able to find some Indian or vegan places with some effort Shopping # Computer centers are the main places to buy electronics Wan Chai Computer Center is what I liked Mong Kok computer center is also good, and also has other types of shops nearby for toys/clothing/shoes etc Toy street has tons of toys Attractions # Lots of places to hike Visa / Paperwork # No visa needed if visit is under 14 days. Just register for Pre-Arrival Registration online. PAR is rejected automatically for passports issued from a few states (e.g. Telangana, Chandigarh, etc) and need to apply for visa in such cases. Data / Phone # Unlike China, all websites/apps work without a vpn Cheap SIMs are available at the airport as well as all 7/11 stores Money # Very heavy on cash. Most smaller stores will not accept cards, or will charge a fee. "},{"id":4,"href":"/notes/travel/japan/","title":"Japan","section":"Travel","content":"Primary cities covered: Tokyo\nTokyo Pre-Travel References # General # Japan Travel Guide Tokyo Travel Guide Japan Travel Tips Subreddit Transportation # https://www.reddit.com/r/JapanTravel/wiki/advice/transport/iccards/ https://www.reddit.com/r/JapanTravelTips/comments/1d5jnlx/do_you_have_a_jr_pass_or_ic_card_suicapasmoetc/ Food # For vegetarians:\nhttps://www.neverendingvoyage.com/vegetarian-survival-guide-to-japan/ Install Happy Cow app Printable cards for communicating dietary restrictions Yodobashi Camera has Cobara Hetta Curry/Naan for Indian food Shopping # Take your passport with you when shopping for removing tax on items\nAkihabara\nYodobashi Camera Thrift Stores\nDaiso / One Dollar Stores 2nd hand stores Japanese specialty items to checkout\nShoes Onitsuka Tiger Knives Attractions # References / Sample Itineraries https://www.youtube.com/watch?v=Lkh3av87amM https://www.reddit.com/r/JapanTravel/comments/1abhpmf/5_days_in_tokyo_where_do_i_includ_sanrio_puroland/ Others Life Size Gundam Statue Pokemon Center Tokyo DX, or in Shibuya PARCO Akihabara Shibuya Cat Street Asakusa Market Ueno Park Takeshita Street shopping Shibuya Scramble Sanrio Puroland - Tattoos potentially not allowed!! DisneySea Mount Fuji Team Labs - Wear shorts because of water Tokyo Tower Samurai Experience Museum Visa / Paperwork # https://the-shooting-star.com/japan-tourist-visa-for-indians-requirements-and-tips/ https://medium.com/@evisajapanapplication/the-ultimate-guide-to-japan-visa-application-documents-ab23f5750586 https://www.vfsglobal.com/one-pager/japan/india/bengaluru/pdf/updated-TOURIST-New.pdf Preferably fill this form a day before travel online Data / Phone # eSim Ubigi Money # Fee free ATMs Aeon - all? Ministop - Visa 7 Bank or 7/11 - Free for mastercard, 110/220 yen for visa below/above 10k yen At Narita, there might be JP Bank/Japan Post office atm or 7/11 atm on 1st floor Narita Airport ATM list "},{"id":5,"href":"/notes/braindump/hugo-multiple-themes/","title":"Multiple Hugo Themes For Different Paths In Same Site","section":"Braindump","content":" Multiple Hugo Themes For Different Paths In Same Site # Background # I decided recently to publish a few of my notes online but wanted to keep it simple and naturally thought of using hugo for it. Now, I could simply setup another subdomain (e.g. notes.shantanugoel.com) but wanted to avoid doing so, and rather use something like shantanugoel.com/notes. This is possible but it\u0026rsquo;d use the same blog theme that I am using on my main domain shantanugoel.com. So I set out to find a way to use a main blog theme for my site while using a separate notes theme for the /notes path.\nSolution # 1. Create a separate folder to hold the content for the notes # 🦄 ls archetypes/ config/ content/ data/ layouts/ notes/ \u0026lt;\u0026lt;---I created this folder public/ resources/ static/ themes/ 2. Split the hugo configuration # The split would have:\nA default configuration that is used for all parts of the site A configuration used only for the main site (Primarily specifying the theme and any specific theme parameters) A configuration used only for the notes site (Primarily specifying the theme and any specific theme parameters + changing the baseURL, and the directory from where to pick up the content and where to publish it) This is how it looks like\n🦄 exa -a --tree --level=2 config config ├── _default │ └── hugo.toml ├── main │ └── hugo.toml └── notes └── hugo.toml 🦄 bat .\\config\\main\\hugo.toml ───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: .\\config\\main\\hugo.toml ───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ [module] 2 │ [[module.imports]] 3 │ path = \u0026#39;github.com/shantanugoel/hugo-theme-terminal/v4\u0026#39; 4 │ 5 │ theme = \u0026#34;hugo-theme-terminal\u0026#34; 🦄 bat .\\config\\notes\\hugo.toml ───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: .\\config\\notes\\hugo.toml ───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ title = \u0026#34;Shantanu\u0026#39;s Notesverse\u0026#34; 2 │ contentDir = \u0026#34;notes\u0026#34; 3 │ publishDir = \u0026#34;public/notes\u0026#34; 4 │ baseurl = \u0026#34;https://shantanugoel.com/notes\u0026#34; 5 │ 6 │ [module] 7 │ [[module.imports]] 8 │ path = \u0026#39;github.com/shantanugoel/hugo-book\u0026#39; 9 │ 10 │ theme = \u0026#34;hugo-book\u0026#34; 11 │ 12 │ [params] 13 │ BookComments = false 14 │ BookSection = \u0026#34;*\u0026#34; 15 │ 16 │ [menu] 17 │ [[menu.before]] 18 │ name = \u0026#34;Blog\u0026#34; 19 │ url = \u0026#34;https://shantanugoel.com\u0026#34; 3. How to use it # Now, you can build the different parts of the site using the -e parameter for hugo to specify the environment. E.g. main site can be built using hugo -e main and the notes site can be built using hugo -e notes. Same can be done for any other hugo commands as well.\n"},{"id":6,"href":"/notes/books/ddia/chapter-2/","title":"Chapter 2: Data Models and Query Languages","section":"Designing Data-Intensive Applications","content":"Most applications are built by layering one data model on top of another. Each layer hides the complexity of the layer below it by providing a clean data model.\nRelational model v/s Document model # SQL based on relational model proposed by Edgar Codd in 1970. Data is organized into relations (tables in SQL) where each relation is an unordered collection of tuples (rows in SQL).\nGoal of relational model was to hide the implementation detail behind a cleaner interface.\nOther competing alternatives that came and went -\u0026gt; Network model, Hierarchical model, XML DBs etc.\nBirth of NoSQL # The name NoSQL originated as a catch twitter hashtag for an OSS distributed DB meetup. Retroactively reinterpreted as Not Only SQL.\nDriving forces behind NoSQL:\nGreater scalability Free and OSS preference over commercial DBs More dynamic data models Object Relational Mismatch # A translation layer is required between application code and the DB model. Difference between these models is called impedance mismatch.\nObject Relational Mapping (ORM) frameworks reduce the boilerplate code required for this translation layer, but don\u0026rsquo;t completely hide the complexity.\nExample for options to store a linkedin profile data in DB:\nRelational Save the varying info (education, companies, cities, etc) in separate tables with foreign key references to the users table Save this info in structured data types like XML or JSON within the same row with querying/indexing support Encode as XML or JSON and save in a text field column of same row, but this loses querying etc support, and the app needs to manage/interpret this data Document oriented DBs directly store all the information as a self-contained JSON doc. This reduces impedance mismatch but loses schema enforcement. It also provides better locality of all info of a user in one place. Also good for one to many relationships. Many to one and Many to Many relationships # Many to one relationships (e.g. many people in seattle) don\u0026rsquo;t fit nicely into the document model. In relational DBs, joins are easy but join support is weak in document DBs. And so, in such cases, application code might need to do the joins.\nHierarchical Model # Very similar to JSON DBs. Represents all data as a tree of nested records. It worked well for one to many relationships but not for many to many, and also didn\u0026rsquo;t support joins.\nNetwork Model # Proposed by CODASYL to solve issues with hierarchical model, by allowing multiple parents for a record. These links were not through foreign keys though but through pointers, but still stored on disk. A path to access a record from root along these chains of links was called access path.\nDue to multiple parents of a record, apps had to keep track of all the relationships and querying/updating the DB became very complex.\nRelational Model # Lays out all the data in the open and all the complexity of choosing the right indexes, ordering, etc is hidden by the query optimizer and app devs don\u0026rsquo;t have to think about it too much.\nComparison to Document DBs # Document DBs are similar to hierarchical models in storing nested records for one to many relationships, while for representing many to many relationships, they are similar to relational DBs. In both cases, the related item is referenced by a unique ID called foreign key in relational model, and a document reference in document model. This ID is resolved at read time by joins or follow up queries.\nRelational v/s Document DBs today: # Pros of Document DBs:\nSchema Flexibility Better perf due to locality of data For some apps, closer to data structures used in code Pros of Relational DBs:\nBetter support for joins and complex queries In document model, the need for joins can be reduced by:\nDenormalizing the data, but app needs to do extra work to keep the denormalized data consistent Making multiple requests to DB, but that moves the complexity to the app code and is also slower Schema Flexibility in Document model # Schema-on-read is a more accurate term than calling document DBs schema-less, because the code reading the data applies some implicity schema but it is not enforced by the DB.\nRelational DBs have schema-on-write, where the schema is enforced by the DB. This is similar to dynamic v/s static type checking paradigms.\nWhen there is a change in schema, typically in document DBs, the app code starts writing new data with new schema and adds a check to handle the old data differently. While in relational DBs, a migration may need to be performed on old data.\nSchema-on-read approach is also useful for heterogenous data where the items in the collection have different schemas.\nData Locality # Pros:\nFaster if large parts if document are required because don\u0026rsquo;t need to retrieve data from multiple tables, and it exists at the same place. Cons:\nNeed to load the whole data even if one needs a small portion. Convergence of Relational and document DBs:\nMost relational DBs these days support XML and JSON. Relational DBs also have features to take advantage of locality by allowing to specify some tables\u0026rsquo; rows to be interleaved within a parent table (Spanner/Oracle/BigTable etc allow this) Many Document DBS support joins, or automatically resolve document references. "},{"id":7,"href":"/notes/archives/","title":"Archives","section":"Shantanu's Notesverse","content":" All Notes: From The Most Recent To The Oldest # Braindump Travel Books Archives Chapter 2: Data Models and Query Languages Shantanu\u0026#39;s Notesverse Multiple Hugo Themes For Different Paths In Same Site Japan Hong Kong Designing Data-Intensive Applications China Chapter 1: Foundations of Data Systems "},{"id":8,"href":"/notes/books/","title":"Books","section":"Shantanu's Notesverse","content":" Notes on books that I read # Designing Data-Intensive Applications "},{"id":9,"href":"/notes/travel/","title":"Travel","section":"Shantanu's Notesverse","content":" My travel notes # China Hong Kong Japan "},{"id":10,"href":"/notes/braindump/","title":"Braindump","section":"Shantanu's Notesverse","content":" Collection of random notes, thoughts, and ideas. # Multiple Hugo Themes For Different Paths In Same Site "}]