<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daap on</title><link>/tags/daap/</link><description>Recent content in Daap on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 02 Aug 2010 10:53:36 +0000</lastBuildDate><atom:link href="/tags/daap/index.xml" rel="self" type="application/rss+xml"/><item><title>SSH Tunneling On Android</title><link>/2010/08/02/ssh-tunneling-android/</link><pubDate>Mon, 02 Aug 2010 10:53:36 +0000</pubDate><guid>/2010/08/02/ssh-tunneling-android/</guid><description>If you want to have a secure browsing environment or just want to access your home network securely without exposing extra services to the internet and without the mess that comes with setting up and maintaining a VPN server, ssh tunneling is your rescuer. In this post, I&amp;rsquo;ll tell you how to setup an ssh tunnel to your home network easily. Also look for some bonus tips at the end ;)</description><content>&lt;p>If you want to have a secure browsing environment or just want to access your home network securely without exposing extra services to the internet and without the mess that comes with setting up and maintaining a VPN server, ssh tunneling is your rescuer. In this post, I&amp;rsquo;ll tell you how to setup an ssh tunnel to your home network easily. Also look for some bonus tips at the end ;)&lt;/p>
&lt;p>This article assumes that you have already installed and setup a ssh server (you can probably use openssh). Also, it assumes that the ssh server is accessible from the internet (i.e. you have appropriately forwarded the port on which ssh server is running). I&amp;rsquo;d also recommend that if you do not have a static IP for your home network, then sign up for a dynamic DNS service (I use dyndns.org) so that you can access your home network easily by using a domain name (e.g. myserver.dyndns.org) from outside.&lt;/p>
&lt;p>Now, here is a step by step guide on what to do on your Android Phone (I&amp;rsquo;m doing this on a Nexus one but should be same for you as well):&lt;!-- raw HTML omitted -->1. Install an app called &amp;ldquo;connectbot&amp;rdquo; from the android marketplace. It is a FREE ssh client for android.&lt;/p>
&lt;ol start="2">
&lt;li>Open it and add the IP (or dynamic domain name as suggested above) and the port on which ssh server is running to the bottom and connect.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="/img/uploads/ssh-tunnel-1.png">&lt;img src="/img/uploads/ssh-tunnel-1-thumb.png" alt="Android SSH Tunnel 1">&lt;/a>&lt;/p>
&lt;ol start="2">
&lt;li>Once connected, press the menu button and select the icon which says &amp;ldquo;Port Forwards&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="/img/uploads/ssh-tunnel-2.png">&lt;img src="/img/uploads/ssh-tunnel-2-thumb.png" alt="Android SSH Tunnel 2">&lt;/a>&lt;/p>
&lt;ol start="3">
&lt;li>On this screen you can configure the ports to be used for tunneling. As you can see I already have my firefly server port configured for music streaming over itunes&amp;rsquo; DAAP protocol. Now, you can press &amp;ldquo;menu&amp;rdquo; button and click on &amp;ldquo;Add ports&amp;rdquo; and go to step 4.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="/img/uploads/ssh-tunnel-3.png">&lt;img src="/img/uploads/ssh-tunnel-3-thumb.png" alt="Android SSH Tunnel 3">&lt;/a>&lt;/p>
&lt;ol start="4">
&lt;li>You will see the dialog box as shown below. Here you can configure mainly two types of ports.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="/img/uploads/ssh-tunnel-4.png">&lt;img src="/img/uploads/ssh-tunnel-4-thumb.png" alt="Android SSH Tunnel 4">&lt;/a>&lt;/p>
&lt;p>4a) First is for services that you want to access already running on your home network. e.g. in my case, I have a firefly media server (mt-daapd) running on a port &amp;ldquo;12345&amp;rdquo; and I want to access this just like I was on LAN over my home wi-fi. In such a case, select &amp;ldquo;type&amp;rdquo; as &amp;ldquo;Local&amp;rdquo;, source port as , say &amp;ldquo;56000&amp;rdquo; and destination as &amp;ldquo;ip:port&amp;rdquo; where ip is the your home local area IP of the machine on which the server is running (My server runs on router itself, which has IP 192.168.1.1) and the port is the actual port on which server is running (e.g. 12345 as we mentioned above). After doing this, just open the respective client app on your phone which wants to connect to this server and enter &amp;ldquo;127.0.0.1&amp;rdquo; as the ip and &amp;ldquo;56000&amp;rdquo; as the port to connect to and it will connect to server as if you were on your home network even over 3G or your office wi-fi.&lt;/p>
&lt;p>4b) Secondly, you can use this tunnel to route all traffic to internet through home connection. For this, choose the type as &amp;ldquo;dynamic&amp;rdquo; and source port as, say, &amp;quot; 56001&amp;quot;. You don&amp;rsquo;t need to select a destination port here because any traffic that comes over this tunnel will be routed back to the internet using the destination ip and port as desired, e.g., specified in a browser&amp;rsquo;s address bar.&lt;/p>
&lt;p>**Bonus: **As I promised above, here is the bonus. For media streaming, you can use mt-daapd or firefly server on your home network, especially on a router like asus wl-500 or any other hackable router with custom firmware. For more info about how to set it up, you can check these posts:&lt;a href="/2009/07/03/compiling-latest-firefly-mt-daapd-asus-wl-500w.html"> Latest Firefly server for your router&lt;/a> and &lt;a href="/2010/07/26/firefly-sqlite-error-unable-to-open-database-file-solution.html">firefly sqlite error solution&lt;/a>. Â For android side things, install the &amp;ldquo;DAAP Client&amp;rdquo; app from the market place and click on &amp;ldquo;Add server&amp;rdquo; option and follow step 4a as mentioned above. And there it is, your own music streaming service anywhere in the world, over edge/3G or any other network :)&lt;/p></content></item><item><title>Firefly / sqlite error "unable to open database file" Solution</title><link>/2010/07/26/firefly-sqlite-error-unable-to-open-database-file-solution/</link><pubDate>Mon, 26 Jul 2010 18:11:40 +0000</pubDate><guid>/2010/07/26/firefly-sqlite-error-unable-to-open-database-file-solution/</guid><description>Recently I came across a weird error while trying to run firefly itunes server (mt-daapd) on my router (Asus wl-500w). It had something to do with sqlite and gave a vague message &amp;ldquo;Unable to open database file&amp;rdquo;. After going bonkers for a short time, I solved it and this is how.
One of my hard disks crashed recently and unfortunately it was the one I had connected to my router to serve media to me all over the house (through PS3/laptop) or when I travel (through laptop/phone).</description><content>&lt;p>Recently I came across a weird error while trying to run firefly itunes server (mt-daapd) on my router (Asus wl-500w). It had something to do with sqlite and gave a vague message &amp;ldquo;Unable to open database file&amp;rdquo;. After going bonkers for a short time, I solved it and this is how.&lt;/p>
&lt;p>One of my hard disks crashed recently and unfortunately it was the one I had connected to my router to serve media to me all over the house (through PS3/laptop) or when I travel (through laptop/phone). I had all the data backed up but somehow didn&amp;rsquo;t preserve the firefly server. I rebuilt the server from source using my &lt;a href="/2009/07/03/compiling-latest-firefly-mt-daapd-asus-wl-500w.html">own guide&lt;/a> (Thank God I did it. I wouldn&amp;rsquo;t have been able to preserve my sanity finding all that out the hard way again.). But after doing all the installation and reconfiguration, it gave me a weird error &amp;ldquo;unable to open database file&amp;rdquo; every time and exited. I checked the permissions on the songs3.db file (in /opt/var/cache/mt-daapd for me) and made it writable by all but the issue persisted. I changed its ownership to the user under which firefly was running but the issue was still there. Finally I found that the server (or maybe its an sqlite thing) was trying to create a temp file in the cache directory for the transactions and since the user with which it was started, didn&amp;rsquo;t own the directory it wasn&amp;rsquo;t able to create the file in it.&lt;/p>
&lt;p>So, the fix: I did a &lt;code>chown &amp;lt;username&amp;gt; /opt/var/cache/mt-daapd&lt;/code> on it and voila! the problem was fixed. I am a happy man now since I own a new android phone since last time and now able to stream all my music to my phone through itunes (daap protocol) server over an ssh tunnel :)&lt;/p></content></item><item><title>Compiling Latest FireFly (mt-daapd) for ASUS WL-500W</title><link>/2009/07/03/compiling-latest-firefly-mt-daapd-asus-wl-500w/</link><pubDate>Fri, 03 Jul 2009 10:28:32 +0000</pubDate><guid>/2009/07/03/compiling-latest-firefly-mt-daapd-asus-wl-500w/</guid><description>FireFly is a nice DAAP based media server that allows you to listen to your music collection anywhere using any DAAP based client like iTunes, with other players (like Winamp, Rhythmbox, VLC, etc) using plugins, or it even has its own dedicated php/flash/java based clients that can be fired up on any platform any computer giving you instant nirvana.
Many people, like me, use it on their Routers or NAS boxes to access their music anywhere without having to keep their home PC running or lugging around external drives.</description><content>&lt;p>FireFly is a nice DAAP based media server that allows you to listen to your music collection anywhere using any DAAP based client like iTunes, with other players (like Winamp, Rhythmbox, VLC, etc) using plugins, or it even has its own dedicated php/flash/java based clients that can be fired up on any platform any computer giving you instant nirvana.&lt;/p>
&lt;p>Many people, like me, use it on their Routers or NAS boxes to access their music anywhere without having to keep their home PC running or lugging around external drives. However, development on this gem stopped some time ago. The last stable build released (2.4.2) was good but it doesn&amp;rsquo;t have a lot of features provided by the nightly builds in svn (subversion). And the last nightly build released (svn-1696) had a lot of broken things. It was rebuilding the database everytime, crashed around quite a bit, had a lot of security holes. So, I decided to get the latest version (trunk) of the FireFly code, as it had a lot of fixes for above issues, put in whatever was missing, and try to build it for my use.&lt;/p>
&lt;p>After a day&amp;rsquo;s worth of efforts, here it is. This latest build is the most rich in features as compared to the stable one, and is just as stable as the 2.4.2 release if not better, and also fixes all the issues shown by the svn-1696 build. The downloadable source and complete install package are attached with this post. But I&amp;rsquo;m also listing down the steps that I took to achieve this so that if anyone wants to recompile it with their own options (e.g. I havenât included ogg/flac support in my build), they are able to do so. You can find the steps below. Please let me know if you have any queries. Also, if you want to submit any patches, Iâll be happy to incorporate them and recompile. Iâm also trying to get this source and package into the unslung/optware repositories for wider distribution.&lt;/p>
&lt;p>&lt;strong>Note: Although Iâve compiled this for Asus WL-500W, it should work for most devices with a mipsel architecture (which includes all the Asus routers in this family). Also, the compilation process should work for most other architectures barring one or two steps. Iâd be happy to help if you want to do so and face any issues.&lt;/strong>&lt;/p>
&lt;p>Changes and Build Steps:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ipkg install optware-devel&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ipkg install buildroot&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit /opt/share/aclocal/audiofile.m4 and change AC_DEFUN(AM_PATH_AUDIOFILE, to AC_DEFUN([AM_PATH_AUDIOFILE],&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ipkg install gettext (for some missing m4 macros, libr_rpath etc)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Comment out AC_USE_SYSTEM_EXTENSIONS in configure.in (using dnl)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>aclocal -I &amp;lt;path of mt-daapd&amp;rsquo;s local m4 dir&amp;gt;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run âautoheaderâ to generate config.h.in&lt;/p>
&lt;/li>
&lt;li>
&lt;p>touch config.rpath (somehow this file is not provided with gettext for us)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>change configure.in line 95, remove the ; at the end&lt;/p>
&lt;/li>
&lt;li>
&lt;p>remove -g flag and add -O2 in configure.in for optimization purpose&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run âautomake &amp;ndash;add-missingâ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run âautoconfâ - to generate configure&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ipkg install grep (for egrep)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>change /bin/sh to /opt/bin/bash in configure and install-sh&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run â./configure &amp;ndash;enable-sqlite3 &amp;ndash;prefix=/opt CPFLAGS=â-D_LIBCâ â (You can also use &amp;ndash;enable-oggvorbis and/or &amp;ndash;enableflac)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After this step, I had to make numerous changes to the source code to put in the missing functionality for database handling, removing some compilation errors, etc. You can diff the svn 1715 code with mine to see the changes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run âmakeâ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run âmake installâ&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>And you are done. The modified source and compiled bianries can be downloaded from below.&lt;/p>
&lt;p>&lt;em>Lost the files in a server move. Sorry :(&lt;/em>&lt;/p>
&lt;p>Let me know if you have any queries or face any issues.&lt;/p></content></item></channel></rss>