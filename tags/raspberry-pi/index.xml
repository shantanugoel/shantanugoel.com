<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raspberry-Pi on</title><link>/tags/raspberry-pi/</link><description>Recent content in Raspberry-Pi on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 19 Jan 2020 02:25:17 +0530</lastBuildDate><atom:link href="/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml"/><item><title>Fixing the Raspberrypi 4 Ethernet disconnection problem</title><link>/2020/01/19/raspberry-pi-4b-ethernet-lan-disconnect/</link><pubDate>Sun, 19 Jan 2020 02:25:17 +0530</pubDate><guid>/2020/01/19/raspberry-pi-4b-ethernet-lan-disconnect/</guid><description>I added a Raspberry Pi 4B recently in my ever expanding homelab. To get the best network with the new gigabit ethernet port on the raspi, and still save power, I added a PoE hat to it so I could power the raspi as well as provide it data through the ethernet port. Everything worked fine except that I ocassionaly got into situations where the raspi stopped responding suddenly. Initially I thought that it&amp;rsquo;s crashing due to some issues and used to just restart it manually.</description><content>&lt;p>I added a Raspberry Pi 4B recently in my ever expanding homelab. To get the best network with the new gigabit ethernet port on the raspi, and still save power, I added a PoE hat to it so I could power the raspi as well as provide it data through the ethernet port. Everything worked fine except that I ocassionaly got into situations where the raspi stopped responding suddenly. Initially I thought that it&amp;rsquo;s crashing due to some issues and used to just restart it manually. I tried switching from manjaro-arm to raspbian as well but that showed same symptoms, despite updating to the latest bootloader and firmware as well. Then I noticed that I could hear the fans on the PoE hat whirring up and settling down even when the raspi was inaccessible. This put me in a doubt that the raspi hasn&amp;rsquo;t actually crashed, because the fans whir up and go down according to the CPU temperature. So this pattern meant that the CPU was still doing something to heat it up. A trip to the kernel logs via &lt;code>journalctl -xe&lt;/code> confirmed the doubt and also showed a few weird messages about the ethernet.&lt;/p>
&lt;p>I tried several things by updating the kernel, picking up several patches, trying different distros but nothing helped. I also found a few such issues reported on raspi&amp;rsquo;s forums/elsewhere without much updates and with/without the PoE hat. Ultimately, I tried a simple solution of resetting ethernet via &lt;code>ethtool&lt;/code> when the issue happens and it worked fine as a workaround. If you see this issue as well and want to employ this workaround, it&amp;rsquo;s pretty easy to do via creating the following 3 files (Note: I&amp;rsquo;ve used systemd timers here. You could instead do it through cron as well).&lt;/p>
&lt;h2 id="file-1-monitorsh">File 1: monitor.sh&lt;/h2>
&lt;p>This file has the code to check the network state and reset ethernet&lt;/p>
&lt;p>File location: &lt;code>~/monitor.sh&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>BASEDIR&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>dirname &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$0&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>now&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ping -q -c &lt;span style="color:#ae81ff">1&lt;/span> -W &lt;span style="color:#ae81ff">1&lt;/span> google.com &amp;gt;/dev/null; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$now&lt;span style="color:#e6db74"> : The network is up&amp;#34;&lt;/span> &amp;gt;&amp;gt; $BASEDIR/eth.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ethtool -r eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$now&lt;span style="color:#e6db74"> : Network down. Trying to restart eth0&amp;#34;&lt;/span> &amp;gt;&amp;gt; $BASEDIR/eth.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="file-2-monitortimer">File 2: monitor.timer&lt;/h2>
&lt;p>File location: &lt;code>/etc/systemd/system/monitor.timer&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>Monitor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Timer&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OnUnitActiveSec&lt;span style="color:#f92672">=&lt;/span>200s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OnBootSec&lt;span style="color:#f92672">=&lt;/span>100s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WantedBy&lt;span style="color:#f92672">=&lt;/span>timers.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="file-3-monitorservice">File 3: monitor.service&lt;/h2>
&lt;p>File location: &lt;code>/etc/systemd/system/monitor.service&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>Monitor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type&lt;span style="color:#f92672">=&lt;/span>oneshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStart&lt;span style="color:#f92672">=&lt;/span>/bin/bash /home/shantanu/monitor.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WantedBy&lt;span style="color:#f92672">=&lt;/span>timers.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the raspi checks every 200 seconds whether it still has a network connection and if it doesn&amp;rsquo;t, then it restarts eth0 to recover the connection. This workaround has been working pretty good for me so far.&lt;/p></content></item><item><title>Browser controlled Raspberry Pi Camera Car</title><link>/2014/08/03/browser-controlled-raspberry-pi-camera-car/</link><pubDate>Sun, 03 Aug 2014 15:33:12 +0000</pubDate><guid>/2014/08/03/browser-controlled-raspberry-pi-camera-car/</guid><description>Spent this weekend building a remote controlled car with a live camera feed with a Raspberry Pi doing the communication and brains duty. Pretty nice real time movement control and camera pan/tilt control through websockets with a live stream feeding back to any browser directly from the car through mjpg-streamer
(PS: Video is at the bottom of the post. Browser/video on TV courtesy ChromeCast. Casted my Nexus 5 screen to the TV simultaneously while controlling the car :) )</description><content>&lt;p>Spent this weekend building a remote controlled car with a live camera feed with a Raspberry Pi doing the communication and brains duty. Pretty nice real time movement control and camera pan/tilt control through websockets with a live stream feeding back to any browser directly from the car through mjpg-streamer&lt;/p>
&lt;p>(PS: Video is at the bottom of the post. Browser/video on TV courtesy ChromeCast. Casted my Nexus 5 screen to the TV simultaneously while controlling the car :) )&lt;/p>
&lt;p>Code: &lt;a href="https://github.com/shantanugoel/raspi-car">https://github.com/shantanugoel/raspi-car&lt;/a>&lt;/p>
&lt;figure class="left" >
&lt;img src="/img/2014/08/2014-08-03-03.44.32-300x225.jpg" />
&lt;/figure>
&lt;figure class="left" >
&lt;img src="/img/2014/08/2014-08-03-03.44.40-300x225.jpg" />
&lt;/figure>
&lt;p>&lt;strong>HW Used:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Dagu Chassis (Includes motors/tires and the plates)&lt;/li>
&lt;li>Dagu Pan/Tilt kit (Servos and brackets to mount the camera)&lt;/li>
&lt;li>Dagu Mini Driver (Arduino clone + Motor driver)&lt;/li>
&lt;li>Raspberry Pi (Model B but any could be used)&lt;/li>
&lt;li>A netgear ethernet to wifi adapter (Since I didn&amp;rsquo;t have the raspi cam so had to save a USB port and use this instead of USB wifi adapter)&lt;/li>
&lt;li>A cheap old USB webcam&lt;/li>
&lt;li>6 AA Cells&lt;/li>
&lt;li>A sony portable charger to power the raspberry pi and wifi adapter&lt;/li>
&lt;li>Wires/Screws/Spacers/Tools (lots of them)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Features:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Control the car from any browser&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Can control motion as well as camera pan/tilt from browser using virtual joysticks (Requires multitouch to do pan/tilt as second joystick is needed for this)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Streams back video from car camera to the browser&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Can rotate left/right while being completely stationary&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Can have multiple connections to the car (not recommended for controlling)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Uses websockets for control and response is almost instantaneous like regular toy cars.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Responsive touch-anywhere joysticks using virtualjoystick (&lt;a href="https://github.com/jeromeetienne/virtualjoystick.js">https://github.com/jeromeetienne/virtualjoystick.js&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>HW Setup overview:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Raspberry Pi connects to the USB webcam and Dagu Mini driver through second USB port (for serial comm)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Raspberry Pi powered by micro USB through portable charger&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DAGU mini driver powered through a 6 AA battery pack (which powers the motors/servos as well)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Servos connected to Digital Pins 2 and 4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Motors connected to Pins 8-11&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wifi adapter powered through portable charger and connected to Pi through ethernet port&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SW Setup Overview:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use any Raspberry Pi software image. I used vanilla raspbian&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get all my code from my github: &lt;a href="https://github.com/shantanugoel/raspi-car">https://github.com/shantanugoel/raspi-car&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compile and start mjpg-streamer using mjpg-streamer.sh (Compilation not needed if using my repo as I included a compiled version of mjpg-streamer and needed plugins)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start websockets and Dagu communication driver back end: controller.py (python controller.py)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open browser to &lt;code>http://rpi:8090&lt;/code> (or &lt;code>http://&amp;lt;RaspberryPiIPAddress&amp;gt;:8090&lt;/code>) from any device&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Touch anywhere to start controlling the car. Left half of screen corresponds to car movement joystick. Right half of screen corresponds to camera pan/tilt joystick. You can use either one of them or both simultaneously.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Some Important Points:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Found that you can&amp;rsquo;t use standard Servo library along with DC motors as it disables the PWM on pins 9 &amp;amp; 10 as it uses Timer 1 (Should have read the manual in the first place :| )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Used ServoTimer2 library to avoid this (since it uses timer 2) but it didn&amp;rsquo;t compile. Got it compiling and is added to my github repo as well so you can use it too.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ServoTimer2 disables use of digital pin 3 for servo. So had to use pin 4 for tilt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Raspberry Pi has a back power connection somehow through its full USB port :o Avoid this as much as possible and power on the Pi first and then the battery pack on the Dagu mini driver&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Sony portable charger is pretty nice and the power on/off button actually came in handy though I generally detested it otherwise. This helped in turning off the Pi (CP-F10 L is the model name if you want)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There is a nice voltage monitor on the Dagu on analog pin 7. This helps in keeping track of the battery levels and can be used to shutdown the car when needed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Servos get driven by the USB power as well but motors require battery power for sure&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0OENujtgdg0?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div></content></item><item><title>Display Message on Samsung TVs in Python (Samsung MessageBox Service Exploitation)</title><link>/2013/07/14/samsung-tv-message-box-python/</link><pubDate>Sun, 14 Jul 2013 14:07:15 +0000</pubDate><guid>/2013/07/14/samsung-tv-message-box-python/</guid><description>This script is the result of a weekend&amp;rsquo;s hacking to get my TV to display incoming calls/texts which I miss invariably because the phone is buried under a sofa or in a different room. Earlier I had done this using my Odroid U2 and Tasker/AutoRemote but this was limiting as this meant that I could see the notifications only when I was watching something through the Odroid. Samsung TVs, which are DLNA enabled, also include a hidden service called &amp;ldquo;Message Box&amp;rdquo; which can display different information on the TV natively irrespective of which display mode/input mode you are in.</description><content>&lt;p>This script is the result of a weekend&amp;rsquo;s hacking to get my TV to display incoming calls/texts which I miss invariably because the phone is buried under a sofa or in a different room. Earlier I had done this using my Odroid U2 and Tasker/AutoRemote but this was limiting as this meant that I could see the notifications only when I was watching something through the Odroid. Samsung TVs, which are DLNA enabled, also include a hidden service called &amp;ldquo;Message Box&amp;rdquo; which can display different information on the TV natively irrespective of which display mode/input mode you are in.&lt;/p>
&lt;p>I had come across this while reverse engineering the DLNA protocol extensions that Samsung had built in their TVs to get subtitles working over DLNA but didn&amp;rsquo;t put much thought into it. Fueled by the new Raspberry Pi I recently acquired (more on this later below), I set out to find out the details of this service and exploit it for my need and a few hours later, samsung-messagebox was born :)&lt;/p>
&lt;p>You can get it from here: &lt;a href="https://github.com/shantanugoel/samsung-messagebox">https://github.com/shantanugoel/samsung-messagebox&lt;/a>&lt;/p>
&lt;p>Usage:&lt;/p>
&lt;pre tabindex="0">&lt;code> usage: samsung-msgbox.py -i IP -m MSG [-p PORT] [-t TIME] [-r RECEIVER]
[-x RECEIVER_NO] [-s SENDER] [-y SENDER_NO] [-h]
Send an arbitrary text message to Samsung TVs which is displayed onscreen.
Developed by Shantanu Goel (http://tech.shantanugoel.com/) version 1.0
Arguments:
-i IP, --ip IP Required. IP Address of the TV
-m MSG, --msg MSG Required. Message body text to be sent to TV
-p PORT, --port PORT Optional. Port on which message should be sent
-t TIME, --time TIME Optional. Receive date and time in epoch/unix format
-r RECEIVER, --receiver RECEIVER
Optional. Receiver Name
-x RECEIVER_NO, --receiverno RECEIVER_NO
Optional. Receiver Number
-s SENDER, --sender SENDER
Optional. Sender Name
-y SENDER_NO, --senderno SENDER_NO
Optional. Sender Number
-h, --help
&lt;/code>&lt;/pre>&lt;p>I&amp;rsquo;ve tested it currently with my 2010 C Series TV. Hopefully, it should work with any TV that has this service. If you face any problems then let me know and I can try to add support for your TV.&lt;/p>
&lt;p>&lt;strong>Raspberry PI:&lt;/strong> So, where does raspberry pi figure in all this? Well, I wanted to display my incoming call/text alerts on my TV. So, I made a small webserver in python that I run on my raspberry pi, listening for some special parameters. Whenever I get a call or SMS, I created a tasker profile to call this server with the call/sms parameters and the server in turn calls the above samsung-messagebox.py script to display the alerts. I&amp;rsquo;m also planning to integrate it with a dropbox based service to put it to more uses. Let me know if you have any ideas in mind.&lt;/p>
&lt;p>Some pics of this working:&lt;/p>
&lt;p>
&lt;figure class="left" >
&lt;img src="/img/2013/07/samsung-messagebox-demo-1-300x225.jpg" />
&lt;/figure>
&lt;figure class="left" >
&lt;img src="/img/2013/07/samsung-messagebox-demo-2-300x225.jpg" />
&lt;/figure>
&lt;/p></content></item></channel></rss>