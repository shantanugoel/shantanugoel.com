<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SDL2 on Shantanu Vs The World</title><link>https://shantanugoel.com/tags/sdl2/</link><description>Recent content in SDL2 on Shantanu Vs The World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>shantanu@shantanugoel.com (Shantanu Goel)</managingEditor><webMaster>shantanu@shantanugoel.com (Shantanu Goel)</webMaster><lastBuildDate>Tue, 31 Dec 2019 02:01:05 +0530</lastBuildDate><atom:link href="https://shantanugoel.com/tags/sdl2/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrating SDL2 with bazel on macOS</title><link>https://shantanugoel.com/2019/12/31/sdl2-macos-bazel/</link><pubDate>Tue, 31 Dec 2019 02:01:05 +0530</pubDate><author>shantanu@shantanugoel.com (Shantanu Goel)</author><guid>https://shantanugoel.com/2019/12/31/sdl2-macos-bazel/</guid><description>Bazel Came across bazel build system recently at my new job and found it to be quite nice compared to my earlier mainstays CMake and Make. It&amp;rsquo;s fast and correct, just as their website says. But I also liked it because it&amp;rsquo;s explicit with very little magic. And it has a powerful query/tools system that allows you to really analyze your builds and dependencies in depth. Though examples in the wild are a bit less since it is a fairly recent entrant compared to its competitors.</description><content>&lt;h2 id="bazel">Bazel&lt;/h2>
&lt;p>Came across &lt;a href="https://bazel.build/">bazel&lt;/a> build system recently at my new job and found it to be quite nice compared to my earlier mainstays CMake and Make. It&amp;rsquo;s fast and correct, just as their website says. But I also liked it because it&amp;rsquo;s explicit with very little magic. And it has a powerful query/tools system that allows you to really analyze your builds and dependencies in depth. Though examples in the wild are a bit less since it is a fairly recent entrant compared to its competitors. For a personal side project, I needed to use SDL2 and it was the first time I had to use an external/pre-built library with bazel. This post documents the process I used for my own future reference and may be help some other lost soul like me. Although, the post talks about SDL2 here specifically, the same process can be used for most other external pre-compiled modules.&lt;/p>
&lt;h2 id="download--install-libsdl">Download / Install libsdl&lt;/h2>
&lt;ul>
&lt;li>Download the latest MacOS dmg file from &lt;a href="http://libsdl.org/download-2.0.php">LibSDL&lt;/a>&lt;/li>
&lt;li>Double click the downloaded dmg file&lt;/li>
&lt;li>Copy the &lt;code>SDL2.framework&lt;/code> folder over to &lt;code>/Library/Frameworks&lt;/code> path&lt;/li>
&lt;/ul>
&lt;h2 id="make-bazel-aware-of-existence-of-sdl2">Make bazel aware of existence of SDL2&lt;/h2>
&lt;p>Update your &lt;code>WORKSPACE&lt;/code> file (resides at the root of your project) with below content. This is important because bazel does all the build steps in a sandbox and one cannot depend on anything outside this sandbox. This step allows bazel to make the content present at this path available to the sandbox as a bazel repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>new_local_repository(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/Library/Frameworks/SDL2.framework&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> build_file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;external/sdl.build&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="set-up-your-sdl-library-to-be-usable-by-other-modules-in-your-project">Set up your SDL library to be usable by other modules in your project&lt;/h2>
&lt;p>Note the &lt;code>build_file&lt;/code> parameter. This tells bazel how to use this repository. This can be anything according to what you want, the path being relative to the project root. Considering the above example, create a new directory &lt;code>external&lt;/code> in the root of your project and add a new file &lt;code>sdl.BUILD&lt;/code> to it with below content.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>load(&lt;span style="color:#e6db74">&amp;#34;@rules_cc//cc:defs.bzl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cc_library&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hdrs &lt;span style="color:#f92672">=&lt;/span> glob([&lt;span style="color:#e6db74">&amp;#34;Headers/*.h&amp;#34;&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> includes &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Header&amp;#34;&lt;/span>], &lt;span style="color:#75715e"># Optional. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visibility &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;//visibility:public&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This ensures that now your other modules can depend on SDL2 using &lt;code>@sdl2&lt;/code>. The visibility option can be tweaked as per individual needs.&lt;/p>
&lt;h2 id="use-sdl2">Use SDL2&lt;/h2>
&lt;p>Update the &lt;code>BUILD&lt;/code> file of the module where you want to use SDL2 with below contents.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>load(&lt;span style="color:#e6db74">&amp;#34;@rules_cc//cc:defs.bzl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cc_library&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;some_module&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> srcs &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;some_source.cc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Optional: copts can be avoided if includes was set in sdl.BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copts &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-Iexternal/sdl2/Headers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> linkopts &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-F/Library/Frameworks&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-framework SDL2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deps &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;@sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important portions here are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>copts&lt;/code>: To let bazel know where to search for SDL2 header files. Note that the path here is relative to project root.&lt;/li>
&lt;li>&lt;code>linkopts&lt;/code>: Need the &lt;code>-F&lt;/code> option to let compiler know where to search for the framework files and &lt;code>-framework&lt;/code> option as usual to link to ZSDL2. The path with &lt;code>-F&lt;/code> can be absolute one. Not sure why this is not restricted by the sandbox. Investigating this currently.&lt;/li>
&lt;li>&lt;code>deps&lt;/code>: Finally, create the explicit dependency on your sdl2 module by referring to it as &lt;code>@sdl2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>By now, the project is ready to be compiled and linked.&lt;/p></content></item></channel></rss>