<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android Dialogs on</title><link>/tags/android-dialogs/</link><description>Recent content in Android Dialogs on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 08 Jul 2010 11:24:14 +0000</lastBuildDate><atom:link href="/tags/android-dialogs/index.xml" rel="self" type="application/rss+xml"/><item><title>BadTokenException Error In Android Dialog</title><link>/2010/07/08/badtokenexception-android-dialog-getapplicationcontext/</link><pubDate>Thu, 08 Jul 2010 11:24:14 +0000</pubDate><guid>/2010/07/08/badtokenexception-android-dialog-getapplicationcontext/</guid><description>If you are creating a custom Dialog for Android, and following the Android Developers’ Creating Dialogs tutorial, then most likely you would have faced a Force Close with this exception showing up in logcat. I did too. Although I figured it out quickly, it might not be easy to find out for many, so posting it here for reference. Basically, the code given in the tutorial goes something like this:</description><content>&lt;p>If you are creating a custom Dialog for Android, and following the &lt;a href="http://developer.android.com/guide/topics/ui/dialogs.html">Android Developers’ Creating Dialogs&lt;/a> tutorial, then most likely you would have faced a Force Close with this exception showing up in logcat. I did too. Although I figured it out quickly, it might not be easy to find out for many, so posting it here for reference. Basically, the code given in the tutorial goes something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Context mContext = getApplicationContext();
Dialog dialog = new Dialog(mContext);
dialog.setContentView(R.layout.custom_dialog);
dialog.setTitle(&amp;#34;Custom Dialog&amp;#34;);
TextView text = (TextView) dialog.findViewById(R.id.text);
text.setText(&amp;#34;Hello, this is a custom dialog!&amp;#34;);
ImageView image = (ImageView) dialog.findViewById(R.id.image);
image.setImageResource(R.drawable.android);
&lt;/code>&lt;/pre>&lt;p>All looks well, but when you execute it, you will get a Force Close. The error appearing in logcat would be something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Uncaught handler: thread main exiting due to uncaught exception
android.view.WindowManager$BadTokenException: Unable to add window -- token null is not for an application
&lt;/code>&lt;/pre>&lt;p>It isn’t apparent immediately that what is causing this error. The very first line in the code “Context mContext = getApplicationContext();” is the culprit.&lt;/p>
&lt;p>&lt;strong>Solution:&lt;/strong> Just replace “getApplicationContext()” with “this” (i.e. “Context mContext = this;” ) and it will work fine.&lt;/p>
&lt;p>&lt;strong>Explanation:&lt;/strong> As to why this is exactly an issue, I’m a bit fuzzy about it myself but this much I’m sure that the contexts that you get with getApplicationContext and this are different. On reading about this function from Android SDK help:&lt;/p>
&lt;blockquote>
&lt;p>Return the context of the single, global Application object of the current process. This generally should only be used if you need a Context whose lifecycle is separate from the current context, that is tied to the lifetime of the process rather than the current component.&lt;/p>
&lt;/blockquote>
&lt;p>I think this would mean is that getApplicationContext returns a context which is for the application itself and not the activity, while “this” would give you the context of the activity in which you are creating the dialog. I think since it is the activity which is associated with the UI (and for whom the window has been created), using the application context would have caused the crash here.&lt;/p></content></item></channel></rss>