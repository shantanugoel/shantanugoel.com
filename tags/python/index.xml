<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Shantanu Vs The World</title><link>https://shantanugoel.com/tags/python/</link><description>Recent content in Python on Shantanu Vs The World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>shantanu@shantanugoel.com (Shantanu Goel)</managingEditor><webMaster>shantanu@shantanugoel.com (Shantanu Goel)</webMaster><lastBuildDate>Sun, 17 Sep 2017 23:46:24 +0530</lastBuildDate><atom:link href="https://shantanugoel.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a bit.ly like shorturl static website</title><link>https://shantanugoel.com/2017/09/17/create-bitly-clone-shorturl-static-website/</link><pubDate>Sun, 17 Sep 2017 23:46:24 +0530</pubDate><author>shantanu@shantanugoel.com (Shantanu Goel)</author><guid>https://shantanugoel.com/2017/09/17/create-bitly-clone-shorturl-static-website/</guid><description>I decided to create my own shorturl website last week for personal use and ended up developing a python project (deecubes)that can be used by anyone to do the same. This is a post to explain what/why/how about it.
Why my own shorturl website? So far I had been using sites like bit.ly or TinyURL whenever I needed to generate a shorturl (e.g. for giving to someone for easily remember, noting down on paper, putting links on resume, etc) but I had concerns that:</description><content>&lt;p>I decided to create my own shorturl website last week for personal use and ended up developing a python project (&lt;a href="https://shgl.in/deecubes/">deecubes&lt;/a>)that can be used by anyone to do the same. This is a post to explain what/why/how about it.&lt;/p>
&lt;h2 id="why-my-own-shorturl-website">Why my own shorturl website?&lt;/h2>
&lt;p>So far I had been using sites like bit.ly or TinyURL whenever I needed to generate a shorturl (e.g. for giving to someone for easily remember, noting down on paper, putting links on resume, etc) but I had concerns that:&lt;/p>
&lt;ul>
&lt;li>The site could go out of operation anytime.&lt;/li>
&lt;li>They seem a bit unprofessional and also, there are a lot of scammy links floating around on these sites that many folks are wary of clicking on them.&lt;/li>
&lt;li>I lose the SEO juice to external sites&lt;/li>
&lt;li>Custom shorturl keywords were mostly taken&lt;/li>
&lt;li>Keep history of all links I convert&lt;/li>
&lt;/ul>
&lt;p>I could satisfy a few of these points by creating an account and using my custom domain with bit.ly or something but my developer itch sealed the deal by giving me something to code :P.&lt;/p>
&lt;h2 id="requirements-for-the-shorturl-website">Requirements for the shorturl website&lt;/h2>
&lt;p>These were the requirements that I listed out while beginning the project:&lt;/p>
&lt;ul>
&lt;li>Should be cheap af. (I ended up at FREE! ;) )&lt;/li>
&lt;li>Should be maintenance free and run itself (I didn&amp;rsquo;t want another headache to tune/apply patches for and what not)&lt;/li>
&lt;li>Should allow addition of links from anywhere (whether on my PC or not)&lt;/li>
&lt;li>Should allow random links as well as custom ones&lt;/li>
&lt;li>Should allow to remove previously generated shorturls&lt;/li>
&lt;li>Should allow me to easily see all generated shorturls, preferably along with history&lt;/li>
&lt;li>Allow previewing the link a shorturl points to without redirecting, if needed&lt;/li>
&lt;/ul>
&lt;p>These lead me to decide on a couple of important things:&lt;/p>
&lt;ul>
&lt;li>The site had to be static (Host on s3 for cheap or github pages for free. No patches/maintenance. Super performance)&lt;/li>
&lt;li>Had to be version controlled (Easy history/viewing/editing from anywhere.)&lt;/li>
&lt;/ul>
&lt;h2 id="deecubes">deecubes&lt;/h2>
&lt;p>Thus, &lt;a href="https://shgl.in/deecubes/">deecubes&lt;/a> was born. (The link in the previous line is shortened using deecubes itself, by the way)&lt;/p>
&lt;p>The name comes from the short form &amp;lsquo;DSSS&amp;rsquo; of Damn Simple Static url Shortener (so, a D and a cube of S&amp;rsquo;s. Idiotic, I know). You can read more about how to use it at the above link in the README but in summary:&lt;/p>
&lt;ul>
&lt;li>It&amp;rsquo;s written in pure python&lt;/li>
&lt;li>It takes a long form url and creates a static website shorturl that can be auto-generated or custom&lt;/li>
&lt;li>It&amp;rsquo;s deterministic, so you can be sure of generating the same website from the same inputs&lt;/li>
&lt;li>Preview can be seen at &lt;!-- raw HTML omitted -->/preview.html (e.g. &lt;a href="https://shgl.in/deecubes/preview.html">https://shgl.in/deecubes/preview.html&lt;/a> )&lt;/li>
&lt;li>Published on pypi, so can install with pip&lt;/li>
&lt;li>Several ways to use/deploy (as simple as ftp or bash/batch scripts or manual git commits/push or commit directly through github website etc )&lt;/li>
&lt;/ul>
&lt;p>Take a look at my generated website repository as an example at &lt;a href="https://shgl.in/deecubesdemo">deecubesdemo&lt;/a>&lt;/p>
&lt;h2 id="my-deployment-strategy">My deployment strategy&lt;/h2>
&lt;p>I ended up with the following stack to add links rather painlessly from anywhere and not do any maintenance:&lt;/p>
&lt;ul>
&lt;li>Github for hosting the website using github pages&lt;/li>
&lt;li>Cloudflare to provide that shiny https and some statistics/caching etc&lt;/li>
&lt;li>Travis to automatically build and deploy the site so I dont need to always generate the shorturl and can commit from anywhere&lt;/li>
&lt;/ul>
&lt;p>Check the repository I linked above to see how it is done. Most of the magic is done in a few lines of the &lt;a href="https://shgl.in/11PAfL1QG/">.travis.yml&lt;/a> file. Essentially it follows this path:&lt;/p>
&lt;ul>
&lt;li>I commit a shorturl .txt file directly in the &amp;ldquo;raw&amp;rdquo; directory through github web on &amp;ldquo;source&amp;rdquo; branch&lt;/li>
&lt;li>Travis picks up the commit and runs deecubes&amp;rsquo; &amp;ldquo;sync&amp;rdquo; command to generate the website portions&lt;/li>
&lt;li>Travis deploys the &amp;ldquo;output&amp;rdquo; folder contents to the &amp;ldquo;master&amp;rdquo; branch of the same repo.&lt;/li>
&lt;li>Github is configured to serve the website from &amp;ldquo;docs&amp;rdquo; folder of master branch through my custom domain shgl.in (&amp;ldquo;docs&amp;rdquo; folder is already created and checked-in inside output folder along with CNAME file)&lt;/li>
&lt;li>Cloudflare is configured to redirect all requests to shgl.in to my github repo&lt;/li>
&lt;/ul>
&lt;p>In a more traditional way, I could also do this:&lt;/p>
&lt;ul>
&lt;li>Generate a shorturl locally using an &amp;ldquo;add&amp;rdquo; or &amp;ldquo;generate&amp;rdquo; command. You could be done at this point and publish the output folder to your website any way you want.&lt;/li>
&lt;li>I Commit the generated files including the output into the repo and push to github.&lt;/li>
&lt;li>Travis will still run and publish the website as earlier.&lt;/li>
&lt;/ul>
&lt;h2 id="things-to-come">Things to come?&lt;/h2>
&lt;p>I want to add the following things in next few weeks to the project:&lt;/p>
&lt;ul>
&lt;li>A collision handling mechanism which is also deterministic&lt;/li>
&lt;li>Allow google analytics addition for collecting metrics&lt;/li>
&lt;li>Allow custom templates for redirect and preview urls&lt;/li>
&lt;li>Your suggestions?&lt;/li>
&lt;/ul></content></item><item><title>email-actions: An SMTP server that triggers actions from email</title><link>https://shantanugoel.com/2017/04/03/email-actions-trigger-tasks-from-email-smtp-server/</link><pubDate>Mon, 03 Apr 2017 19:20:59 +0530</pubDate><author>shantanu@shantanugoel.com (Shantanu Goel)</author><guid>https://shantanugoel.com/2017/04/03/email-actions-trigger-tasks-from-email-smtp-server/</guid><description>Releasing my project email-actions today. You install it from github or from pypi.
email-actions email-actions is a tiny SMTP server with a rules based engine to trigger any actions (notifications/commands etc) based on the emails sent to this server. Think of it like IFTTT but where input trigger is email and can be set up and run locally as well.
Why did you make email-actions Like most of my projects, email-actions is a &amp;lsquo;scratch-your-own-itch&amp;rsquo; project.</description><content>&lt;p>Releasing my project &lt;a href="https://github.com/shantanugoel/email-actions">email-actions&lt;/a> today. You install it from github or from pypi.&lt;/p>
&lt;h1 id="email-actions">email-actions&lt;/h1>
&lt;p>email-actions is a tiny SMTP server with a rules based engine to trigger any actions (notifications/commands etc) based on the emails sent to this server.
Think of it like &lt;a href="https://ifttt.com">IFTTT&lt;/a> but where input trigger is email and can be set up and run locally as well.&lt;/p>
&lt;h1 id="why-did-you-make-email-actions">Why did you make email-actions&lt;/h1>
&lt;p>Like most of my projects, email-actions is a &amp;lsquo;scratch-your-own-itch&amp;rsquo; project. I bought a NAS (Synology ds216j) which also doubled as a downloader of anime/tv shows etc through RSS using its inbuilt &amp;ldquo;Download Station&amp;rdquo; app. I also used Plex to watch them over the network but these needed to be moved to a proper folder and named in a specific format (and some crap deleted and other maintenance done or sometimes some post processing done) to have Plex display/play them properly. I used Filebot and a few custom scripts for this but had to either do this manually or use a fixed time task scheduling (which tended to delay watching). This was semi-irritating.
I also wanted to know when something had been downloaded so I could binge on that latest episode as soon as it was done :)
Download station had a hack (by changing internal files) to run custom script after a download was completed but it had to be redone after every firmware update and sometimes, after every restart. And finally it stopped working altogether with recent updates.&lt;/p>
&lt;p>It did support email notifications though. Thus email-actions was born. So I could push notifications for downloaded items run my custom scripts on the downloaded items.&lt;/p>
&lt;p>Since then, I&amp;rsquo;ve started using it for many other things as email is pervasive and most of the devices support email based notifications. So I can trap them and carry out other actions.&lt;/p>
&lt;h1 id="what-are-the-benefitsdifferences-compared-to-hosted-services-like-ifttt">What are the benefits/differences compared to hosted services like IFTTT&lt;/h1>
&lt;p>IFTTT provides email hooks as well. I &lt;em>think&lt;/em> email-actions may be an alternative (you can decide whether it&amp;rsquo;s better or not) with respect to below:&lt;/p>
&lt;ul>
&lt;li>IFTTT works as a client once email is received so you still need an available SMTP server to be able to send email. This can be expensive or risky as you&amp;rsquo;d have to share your server username/pwd to the email sending entity. email-actions is an SMTP server that takes actions before any actual email delivery.&lt;/li>
&lt;li>Can be run locally with minimal dependencies. You don&amp;rsquo;t need to send your data to internet or even have an internet connection&lt;/li>
&lt;li>Tiny footprint&lt;/li>
&lt;li>Can run local commands as well while IFTTT still needs to be integrated with something else if that&amp;rsquo;s what you need&lt;/li>
&lt;li>You are in control of your info&lt;/li>
&lt;li>Free(er), that is, no limitations on hooks/conditions etc&lt;/li>
&lt;/ul>
&lt;h1 id="current-high-level-feature-list">Current high level feature list&lt;/h1>
&lt;ul>
&lt;li>aiosmtpd based for aync email processing for performance&lt;/li>
&lt;li>The action execution is also asyncio based, so will free up the email sender while processing the action in background&lt;/li>
&lt;li>Easy yaml based configuration&lt;/li>
&lt;li>Global or local variables for full customization/reuse&lt;/li>
&lt;li>Action decision based on &amp;ldquo;To&amp;rdquo; email address filtering (Addition of many other filters on the roadmap)&lt;/li>
&lt;li>Plugins supported:
&lt;ul>
&lt;li>&lt;a href="https://joaoapps.com/join/">Join&lt;/a> push notifications (Will add pushbullet if there&amp;rsquo;s a demand or can use custom external script for now)&lt;/li>
&lt;li>Custom Local commands (Any arguments, any script type, custom environment variables)&lt;/li>
&lt;li>Email (Can forward the email to custom upstream servers further if needed for more actions or actual email delivery)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="installation">Installation&lt;/h1>
&lt;p>Pre-requisites: You need Python 3.4+ to be able to run this&lt;/p>
&lt;ul>
&lt;li>Install using pip (May need to use &lt;code>pip3&lt;/code> instead of &lt;code>pip&lt;/code> according to your OS/python installation. May need to use &lt;code>sudo&lt;/code> prefix before below command if installing system wide)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>pip install email-actions&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Install directly&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>git clone git@github.com:shantanugoel/email-actions.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd email-actions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python setup.py install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="usage">Usage&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>usage: email_actions [-h] [-v] [-H HOSTNAME] [-p PORT] [-l LOG] -c CONFIG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>optional arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help show this help message and exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v, --version show program&amp;#39;s version number and exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -H HOSTNAME, --hostname HOSTNAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Host IP or name to bind the server to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p PORT, --port PORT Port number to bind the server to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -l LOG, --log LOG Set log level. 0=&amp;gt; Warning, 1=&amp;gt;Info, 2=&amp;gt;Debug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>required arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -c CONFIG, --config CONFIG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Specify config file (yaml format) to be used. If it
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doesn&amp;#39;t exist, we&amp;#39;ll try to create it
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>email_actions -H 127.0.0.1 -p 8500 -l 2 -c /home/shantanu/email_actions_cfg.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>email_actions -c /home/shantanu/email_actions_cfg.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Most of the options above are self explanatory. If you don&amp;rsquo;t specify a hostname, it will choose &lt;code>localhost&lt;/code> by default. If you don&amp;rsquo;t specify a port, it&amp;rsquo;ll choose &lt;code>8025&lt;/code> by default.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong> I recommend running the server on localhost or an internal network interface so that it can&amp;rsquo;t be abused from internet. Right now it doesn&amp;rsquo;t support authentication (limitation of aiosmtpd. Will be fixed soon), so if you must open it up to the internet, add your own scheme of verification either through a randomly generated email address in &amp;ldquo;To&amp;rdquo; rule or some other check in subject/content in your own external script that you are triggering.&lt;/p>
&lt;p>Specifying a config file is mandatory. If the specified file doesn&amp;rsquo;t exist, we&amp;rsquo;ll generate a dummy one which you can fill. But essentially this is a step that you can&amp;rsquo;t avoid. The config file is explained in more detail below.&lt;/p>
&lt;h2 id="config-file-format">Config file format&lt;/h2>
&lt;p>email-actions uses the simple &lt;code>yaml&lt;/code> format for its configuration. Learning this is a small task (few minutes at most for the basic usage that we need). You can look at &lt;a href="https://learn.getgrav.org/advanced/yaml">this page&lt;/a> for a quick reference.&lt;/p>
&lt;p>email-actions works on the basis of user specified &lt;code>filters&lt;/code>. Each filter can have &lt;code>rules&lt;/code> specified which decide whether to run an action or not on the incoming email. Each filter also specifies &lt;code>actions&lt;/code> (which is 1 or more plugins) to run an action on the incoming email if it passes the &lt;code>rules&lt;/code>.&lt;/p>
&lt;p>At least 1 filter is necessary in the configuration. Each filter must have at least 1 action. Rest all is optional. Each action plugin may have it&amp;rsquo;s own mandatory OR optional settings. See &lt;a href="#plugin-settings">Plugin Settings&lt;/a> for all available plugins and their options/variables&lt;/p>
&lt;p>The config file has the following general format. All text after &lt;code>#&lt;/code> is an explanation, not a part of the config itself.&lt;/p>
&lt;p>Names within &lt;code>&amp;lt;&amp;gt;&lt;/code> can be substituted by user as per their choice. Names outside &lt;code>&amp;lt;&amp;gt;&lt;/code> are reserved by email-actions and must be used as is.&lt;/p>
&lt;p>All settings are case-sensitive. So take care of that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>global: &lt;span style="color:#75715e"># Optional keyword that specifies global variables for plugins. These are available in all instances of your plugins in each filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>plugin_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>: &lt;span style="color:#75715e"># Plugin name for which you are specifying a global variable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>setting_1&lt;span style="color:#f92672">&amp;gt;&lt;/span>: &lt;span style="color:#f92672">&amp;lt;&lt;/span>abcd&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e"># Variable/setting for this plugin.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>setting_2&lt;span style="color:#f92672">&amp;gt;&lt;/span>: &lt;span style="color:#f92672">&amp;lt;&lt;/span>efgh&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e"># Variable/setting for this plugin.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filters: &lt;span style="color:#75715e">#Mandatory keyword to signify start of your filters specifications.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>filter_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>: &lt;span style="color:#75715e"># User specified name for a filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rules: &lt;span style="color:#75715e"># Rules specifications start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to: &lt;span style="color:#f92672">&amp;lt;&lt;/span>email_id&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e"># A rule that matches&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example: Take a look at the below sample config (Also found in &lt;a href="https://github.com/shantanugoel/email-actions/blob/master/sample/config.yml">this location&lt;/a>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Specify a global variable for join plugin&amp;#39;s api key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> join:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apikey: my_join_app_api_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Specify 2 filters.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># my_filter matches only the emails which are sent to abc@a.com and runs below 2 actions:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Send join push notification using the global join api key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Send an email using the credentials specified&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># my_second_filter runs on all emails since there is no rule specified&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># It runs below 2 actions:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Send join notification using another_api_key. Local variable overrides the global one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Run external command with given args and also sets up a environment variable called &amp;#34;MY_ENV_VAR&amp;#34; which can be accessed in external command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filters:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_filter:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rules:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to: abc&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>a&lt;span style="color:#f92672">.&lt;/span>com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> join:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host: smtp&lt;span style="color:#f92672">.&lt;/span>example&lt;span style="color:#f92672">.&lt;/span>com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: my_email_username
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> password: my_email_password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: &lt;span style="color:#ae81ff">587&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure: True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_second_filter:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> join:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apikey: another_api_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd: &lt;span style="color:#f92672">/&lt;/span>home&lt;span style="color:#f92672">/&lt;/span>shantanu&lt;span style="color:#f92672">/&lt;/span>test&lt;span style="color:#f92672">.&lt;/span>sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#f92672">/&lt;/span>home&lt;span style="color:#f92672">/&lt;/span>shantanu&lt;span style="color:#f92672">/&lt;/span>abc_file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span> another_arg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MY_ENV_VAR: &lt;span style="color:#e6db74">&amp;#39;Some Value&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rules">Rules&lt;/h2>
&lt;p>Currently, below rules are supported. These can be specified under a &lt;code>rules&lt;/code> block.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Rule Keyword&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>to&lt;/td>
&lt;td>Any email id which should exactly match the &amp;ldquo;To&amp;rdquo; field in the incoming email&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="plugin-settings">Plugin Settings&lt;/h2>
&lt;h3 id="join">join&lt;/h3>
&lt;p>This plugin sends a push notification to your devices using the &lt;a href="https://joaoapps.com/join/">Join&lt;/a> app&lt;/p>
&lt;p>Options:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option Keyword&lt;/th>
&lt;th>Mandatory / Optional&lt;/th>
&lt;th>Default Value&lt;/th>
&lt;th>Comment&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>apikey&lt;/td>
&lt;td>Mandatory&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Your API key from &lt;a href="https://joinjoaomgcd.appspot.com/">here&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deviceId&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>group.all&lt;/td>
&lt;td>See valid options &lt;a href="https://joaoapps.com/join/api/">here&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>title&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>Email Subject&lt;/td>
&lt;td>See valid options &lt;a href="https://joaoapps.com/join/api/">here&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>text&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>Email content&lt;/td>
&lt;td>See valid options &lt;a href="https://joaoapps.com/join/api/">here&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="exec">exec&lt;/h3>
&lt;p>This plugin allows to run any arbitrary command or script on your local system on which email-actions server is running.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option Keyword&lt;/th>
&lt;th>Mandatory / Optional&lt;/th>
&lt;th>Default Value&lt;/th>
&lt;th>Comment&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cmd&lt;/td>
&lt;td>Mandatory&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Full path to the command to be run. Don&amp;rsquo;t include arguments. Enclose in quotes if space in path&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>args&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>Empty list&lt;/td>
&lt;td>List of arguments to be passed to command, 1 on each line.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>env&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>Empty dictionary&lt;/td>
&lt;td>Key value pair of custom environment variables for the external command/script. One on each line&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="email">email&lt;/h3>
&lt;p>This plugin allows to forward the incoming email further to an upstream smtp server&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option Keyword&lt;/th>
&lt;th>Mandatory / Optional&lt;/th>
&lt;th>Default Value&lt;/th>
&lt;th>Comment&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>host&lt;/td>
&lt;td>Mandatory&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Provide hostname or ip of your upstream smtp server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>port&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>25&lt;/td>
&lt;td>Port for upstream smtp server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>username&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>None&lt;/td>
&lt;td>username if required&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>password&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Password if required&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>secure&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>False&lt;/td>
&lt;td>Set it to true if upstream server requires secure/TLS connection&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="contributing">Contributing&lt;/h1>
&lt;p>Feel free to fork the repo and send PRs for any changes. If you can&amp;rsquo;t make changes but want to report issues or provide feedback, open an Issue on github or ping me on twitter &lt;a href="https://twitter.com/shantanugoel">@shantanugoel&lt;/a>&lt;/p>
&lt;p>You can contribute either to the core or write a plugin for your usecase. The only guiding principle is to keep it as simple/minimal as possible.&lt;/p>
&lt;h2 id="how-to-write-a-plugin">How to write a plugin&lt;/h2>
&lt;p>Take a look at any plugin in &lt;a href="https://github.com/shantanugoel/email-actions/tree/master/email_actions/plugins">plugins&lt;/a> directory
A minimal plugin needs to do following things:&lt;/p>
&lt;ul>
&lt;li>Define &amp;lsquo;PLUGIN_NAME&amp;rsquo;. This need not be same as the file name but is preferred to keep that way&lt;/li>
&lt;li>A function that takes these parameters: &lt;code>filter_name, msg_from, msg_to, msg_subject, msg_content&lt;/code> and doesn&amp;rsquo;t return anything&lt;/li>
&lt;li>Read plugin&amp;rsquo;s configuration (if any) using email_actions.config.read_config_plugin function
&lt;ul>
&lt;li>Ideally the plugin should not need to use any other function from the core&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>After writing the plugin, add the plugin&amp;rsquo;s name and entry function in &lt;code>entry_funcs&lt;/code> dict in &lt;a href="https://github.com/shantanugoel/email-actions/tree/master/email_actions/plugins/__init__.py">plugins init file&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Fixing the problem of matplotlib and ggplot not showing graphs in python</title><link>https://shantanugoel.com/2016/06/29/fixing-the-problem-of-matplotlib-and-ggplot-not-showing-graphs-in-python/</link><pubDate>Wed, 29 Jun 2016 14:20:55 +0000</pubDate><author>shantanu@shantanugoel.com (Shantanu Goel)</author><guid>https://shantanugoel.com/2016/06/29/fixing-the-problem-of-matplotlib-and-ggplot-not-showing-graphs-in-python/</guid><description>While trying to make some graphs for one of my side projects recently, I came across an issue that both matplotlib and ggplot did not show up the graphs. I was able to save the graphs to an image file just fine, but if I tried to show them directly on screen while running the script, it just printed a number and exited. After tearing apart my hair for some time, I checked the backend being used by matplot lib:</description><content>&lt;p>While trying to make some graphs for one of my side projects recently, I came across an issue that both matplotlib and ggplot did not show up the graphs. I was able to save the graphs to an image file just fine, but if I tried to show them directly on screen while running the script, it just printed a number and exited. After tearing apart my hair for some time, I checked the backend being used by matplot lib:&lt;/p>
&lt;p>&lt;code>import matplotlib matplotlib.get_backend() &lt;/code>&lt;/p>
&lt;p>And there was the problem. It showed the backend being used was &amp;ldquo;agg&amp;rdquo;. Looking at the matplotlib documentation, I figured that this backend is used for rendering the graph into an image and saving it. That explained why I was able to save the images fine. But it didn&amp;rsquo;t have any interactive support. For that I had to install one of the other backends which had this support, e.g., Tkagg. So, for that what I had to do was, first install the Tk related packages using the below command:&lt;/p>
&lt;p>&lt;code>sudo apt-get install tcl-dev tk-dev python-tk python3-tk &lt;/code>&lt;/p>
&lt;p>Another important step now is to reinstall matplotlib so that it detects the new backend, but also remember that if you just do a plain pip uninstall/install, it may not work because that will pick up the previous cached installation. So you have to use the &amp;ndash;no-cache-dir option like below:&lt;/p>
&lt;p>&lt;code>pip uninstall matplotlib pip install matplotlib --no-cache-dir &lt;/code>&lt;/p>
&lt;p>Now, the graphs work fine for both saving as image as well as showing up during runtime.&lt;/p></content></item><item><title>Display Message on Samsung TVs in Python (Samsung MessageBox Service Exploitation)</title><link>https://shantanugoel.com/2013/07/14/samsung-tv-message-box-python/</link><pubDate>Sun, 14 Jul 2013 14:07:15 +0000</pubDate><author>shantanu@shantanugoel.com (Shantanu Goel)</author><guid>https://shantanugoel.com/2013/07/14/samsung-tv-message-box-python/</guid><description>This script is the result of a weekend&amp;rsquo;s hacking to get my TV to display incoming calls/texts which I miss invariably because the phone is buried under a sofa or in a different room. Earlier I had done this using my Odroid U2 and Tasker/AutoRemote but this was limiting as this meant that I could see the notifications only when I was watching something through the Odroid. Samsung TVs, which are DLNA enabled, also include a hidden service called &amp;ldquo;Message Box&amp;rdquo; which can display different information on the TV natively irrespective of which display mode/input mode you are in.</description><content>&lt;p>This script is the result of a weekend&amp;rsquo;s hacking to get my TV to display incoming calls/texts which I miss invariably because the phone is buried under a sofa or in a different room. Earlier I had done this using my Odroid U2 and Tasker/AutoRemote but this was limiting as this meant that I could see the notifications only when I was watching something through the Odroid. Samsung TVs, which are DLNA enabled, also include a hidden service called &amp;ldquo;Message Box&amp;rdquo; which can display different information on the TV natively irrespective of which display mode/input mode you are in.&lt;/p>
&lt;p>I had come across this while reverse engineering the DLNA protocol extensions that Samsung had built in their TVs to get subtitles working over DLNA but didn&amp;rsquo;t put much thought into it. Fueled by the new Raspberry Pi I recently acquired (more on this later below), I set out to find out the details of this service and exploit it for my need and a few hours later, samsung-messagebox was born :)&lt;/p>
&lt;p>You can get it from here: &lt;a href="https://github.com/shantanugoel/samsung-messagebox">https://github.com/shantanugoel/samsung-messagebox&lt;/a>&lt;/p>
&lt;p>Usage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> usage: samsung-msgbox.py -i IP -m MSG [-p PORT] [-t TIME] [-r RECEIVER]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [-x RECEIVER_NO] [-s SENDER] [-y SENDER_NO] [-h]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Send an arbitrary text message to Samsung TVs which is displayed onscreen.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Developed by Shantanu Goel (http://tech.shantanugoel.com/) version 1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i IP, --ip IP Required. IP Address of the TV
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -m MSG, --msg MSG Required. Message body text to be sent to TV
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p PORT, --port PORT Optional. Port on which message should be sent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -t TIME, --time TIME Optional. Receive date and time in epoch/unix format
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -r RECEIVER, --receiver RECEIVER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Optional. Receiver Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -x RECEIVER_NO, --receiverno RECEIVER_NO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Optional. Receiver Number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -s SENDER, --sender SENDER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Optional. Sender Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -y SENDER_NO, --senderno SENDER_NO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Optional. Sender Number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;ve tested it currently with my 2010 C Series TV. Hopefully, it should work with any TV that has this service. If you face any problems then let me know and I can try to add support for your TV.&lt;/p>
&lt;p>&lt;strong>Raspberry PI:&lt;/strong> So, where does raspberry pi figure in all this? Well, I wanted to display my incoming call/text alerts on my TV. So, I made a small webserver in python that I run on my raspberry pi, listening for some special parameters. Whenever I get a call or SMS, I created a tasker profile to call this server with the call/sms parameters and the server in turn calls the above samsung-messagebox.py script to display the alerts. I&amp;rsquo;m also planning to integrate it with a dropbox based service to put it to more uses. Let me know if you have any ideas in mind.&lt;/p>
&lt;p>Some pics of this working:&lt;/p>
&lt;p>
&lt;figure class="left" >
&lt;img src="https://shantanugoel.com/img/2013/07/samsung-messagebox-demo-1-300x225.jpg" />
&lt;/figure>
&lt;figure class="left" >
&lt;img src="https://shantanugoel.com/img/2013/07/samsung-messagebox-demo-2-300x225.jpg" />
&lt;/figure>
&lt;/p></content></item></channel></rss>