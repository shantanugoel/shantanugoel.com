<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Malware on Shantanu Vs The World</title><link>https://shantanugoel.com/tags/malware/</link><description>Recent content in Malware on Shantanu Vs The World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Feb 2013 16:55:10 +0000</lastBuildDate><atom:link href="https://shantanugoel.com/tags/malware/index.xml" rel="self" type="application/rss+xml"/><item><title>Apple, Anti-Malware, Patents</title><link>https://shantanugoel.com/2013/02/15/apple-anti-malware-patents/</link><pubDate>Fri, 15 Feb 2013 16:55:10 +0000</pubDate><guid>https://shantanugoel.com/2013/02/15/apple-anti-malware-patents/</guid><description>&lt;p>Recently, there has been this trend. Blogs look for patents filed by companies and then report on each of them as if they are second coming of Jesus in technology. Especially if it is Apple who is doing the filings.&lt;/p>
&lt;p>A few days ago, this &lt;a href="http://www.zdnet.com/apples-new-wave-anti-malware-patent-takes-a-leaf-out-of-qubes-book-7000011118/">new patent&lt;/a> showed up about Apple&amp;rsquo;s &amp;ldquo;new wave approach to fighting malware&amp;rdquo; with the author giving up half-researched commentary on it.&lt;/p>
&lt;p>I was intrigued by this news (if you can call it that), not because it’s something new but instead because process isolation is hardly a new concept. The author mentions &amp;ldquo;Qubes OS&amp;rdquo; as the one to be original inventor before Apple but in fact, it has been used for years (eg chrooting/containers in linux) and more popular recently in Android’s uid based approach. Even Qualcomm (and other SoC vendors) have stuff that helps in this space with Trustzone based isolation between processor entities at hardware level.&lt;/p></description><content>&lt;p>Recently, there has been this trend. Blogs look for patents filed by companies and then report on each of them as if they are second coming of Jesus in technology. Especially if it is Apple who is doing the filings.&lt;/p>
&lt;p>A few days ago, this &lt;a href="http://www.zdnet.com/apples-new-wave-anti-malware-patent-takes-a-leaf-out-of-qubes-book-7000011118/">new patent&lt;/a> showed up about Apple&amp;rsquo;s &amp;ldquo;new wave approach to fighting malware&amp;rdquo; with the author giving up half-researched commentary on it.&lt;/p>
&lt;p>I was intrigued by this news (if you can call it that), not because it’s something new but instead because process isolation is hardly a new concept. The author mentions &amp;ldquo;Qubes OS&amp;rdquo; as the one to be original inventor before Apple but in fact, it has been used for years (eg chrooting/containers in linux) and more popular recently in Android’s uid based approach. Even Qualcomm (and other SoC vendors) have stuff that helps in this space with Trustzone based isolation between processor entities at hardware level.&lt;/p>
&lt;p>So, I wanted to check out what’s new here (which was not immediately clear and probably no one else tried to see it because the patent link is wrong in the article and it links to some display patent, not the one in question). The correct patent is this: &lt;a href="http://www.freepatentsonline.com/RE43987.html">http://www.freepatentsonline.com/RE43987.html&lt;/a>&lt;/p>
&lt;p>After going through the mangled language that any patent embodies, it is clear that “conceptually” it is similar to what has been done till now, but the approach is different. On the whole, the basic difference seems to be that linux uses chrooting, android uses separate users, Qubes adds a virtualization layer to achieve the above and Apple goes one further (not necessarily better) and makes it real/physical separate processor instead of a virtual one.&lt;/p>
&lt;p>However, I’m still not sold on this and it doesn’t seem foolproof. (I’m not a security expert by any means, so please take the below with a tablespoon full of salt and you are free to add corrections or throw me out the window ;) ) In fact, it doesn’t seem much better than the current system but has an add-on of cost (extra physical processor, dedicated circuitry/components) and losing ease of use. Some points to be noted:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The burden is still mostly on user. The user still needs to keep all his anti-malware programs updated all the time and be alert for each indication on the system and allow/disallow things to happen in system all the time to keep it protected. This approach is not going to save the system in any way if any of the above steps falter. Which is, pretty similar to what we see today.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The approach does not mention aversion of several crucial points:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>a. If processor P2 itself is compromised by the malware, then it is rendered useless in the scenario where P2 itself is tasked with scanning the memory/files on Memory M2 for malware. It can be made to just report “all clean” by malware as the scanning engine running on P2 is still accessible by network content in the same way it would have been on P1 in a non-dual-processor system.&lt;/p>
&lt;p>b. P2 is connected to the video display subsystem and this can be used to malware’s advantage to trick user into clicking on wrong areas or doing wrong things in the same way as it is today&lt;/p>
&lt;p>c. It says keypresses can be encrypted by P1 and decrypted by Network device 190 to allow P2 to not know what was pressed. But this again seems to not require the above approach. First, it requires a special network device now, not a generic one as mentioned in the patent. Second, since the network device itself needs to be configurable now for this, there is another attack vector there. This is, however, somewhat similar to what existing SoC solutions do in mobile space but that is better/feasible because the other end is a software entity and the mechanics of how it works is different.&lt;/p>
&lt;p>d. For online gaming etc, where the influx of data is huge and needs to be processed in real time, P1 takes this data directly from M2 once P2 signals availability. Not sure, how is this different then from having a single processor system without the above isolation?&lt;/p>
&lt;p>e. Several other things which I can keep typing about till my keys wear out.&lt;/p>
&lt;p>&lt;strong>TL;DR&lt;/strong>: This patent on its own may be a new idea (rather a new twist to an existing concept) but it is hardly something that can be put into practice and maybe the reason why Apple hasn’t actually produced anything with this, yet. It might become better with other ideas coupled (which Apple may have filed separate patents for but are currently unknown).&lt;/p>
&lt;p>Aside: Why do patents cite archaic things? Every patent gives examples of some old stuff. E.g. Even though this patent was filed in 2011, it refers to Pentium 4 as an example of processors and Quake 3 Arena as an example of online games?&lt;/p></content></item><item><title>Solving The Android Permissions And Malware Puzzle</title><link>https://shantanugoel.com/2010/08/13/android-permissions-malware/</link><pubDate>Fri, 13 Aug 2010 19:44:59 +0000</pubDate><guid>https://shantanugoel.com/2010/08/13/android-permissions-malware/</guid><description>&lt;p>There has been a spate of security reports recently about Android apps being malware or suspicious. Most of these were found baseless but at least one was indeed correct (e.g. The Russian Trojan app). We also know that Android has a very good &lt;a href="https://shantanugoel.com/2010/06/26/android-vs-iphone-security-models.html">security model&lt;/a> but even then, the rest of the reports also makes one think and focus on why an apps requires the permissions that it states it needs?&lt;/p></description><content>&lt;p>There has been a spate of security reports recently about Android apps being malware or suspicious. Most of these were found baseless but at least one was indeed correct (e.g. The Russian Trojan app). We also know that Android has a very good &lt;a href="https://shantanugoel.com/2010/06/26/android-vs-iphone-security-models.html">security model&lt;/a> but even then, the rest of the reports also makes one think and focus on why an apps requires the permissions that it states it needs?&lt;/p>
&lt;p>We all MUST check the permissions that an app requires before installing it and then contemplate what particular feature of the app would require any mentioned permission. The problem here is two part. First is that the permissions can be cryptic. Now, I can understand most of these as I also develop Android apps but I&amp;rsquo;d fathom that a huge majority wouldn&amp;rsquo;t. A simple solution to this would be for Google to provide more details (and probably examples) for each permission. One can say that it is difficult and a UI nightmare to include too much of text into the limited space that the mobile screen gets. My suggestion here would be to keep the existing layout as it is, but when someone clicks on a requested permission, he be taken to a new page which describes the permission in detailed but simple words and also provides examples.&lt;/p>
&lt;p>But this is just the first part of the current problem. The more important issue most apps are facing these days is &amp;ldquo;&lt;strong>permission creep in&lt;/strong>&amp;rdquo;, i.e., they request for permissions they don&amp;rsquo;t really require. This could be because either they are just adding it to their manifest file mistakenly without using them or are taking a long route for solving a problem that should ideally have been solved in a much easier way without requiring excessive permissions. This permission creep in makes even legit apps look bad. e.g. There was this recent case of a &lt;a href="http://techcrunch.com/2010/07/29/android-wallpaper-hack/">wallpaper app&lt;/a> which was crucified by mainstream media all over the world because of the permissions it was using and then it turned out to be just that the developer&amp;rsquo;s method to solve a particular problem (providing &amp;ldquo;favorites&amp;rdquo; and &amp;ldquo;recommended&amp;rdquo; features to users) was long-winded. This is quite common today in Android marketplace. e.g. I tried to install the hugely famous &amp;ldquo;Chomp SMS&amp;rdquo; app today and noticed that it requires my &amp;ldquo;location&amp;rdquo; as well. Pretty weird that an SMS app needs my location and when combined with the &amp;ldquo;Internet&amp;rdquo; permission that it requires as well, it made me go &amp;ldquo;hmmm&amp;rdquo; even though it is tried and tested by a huge number of people without issues. Then I realized that it might need the internet permission for ads (since I was downloading the free version) but still a bit doubtful about location, probably that is needed for ads targeting (especially because it wanted my coarse location only, i.e., cell-triangulation location by which it can easily identify my general region or country, which is all what is needed) but I&amp;rsquo;m still not sure. Even the Android Guru &lt;a href="http://commonsware.com/blog/2010/08/12/evernote-why-you-need-think-about-permissions.html">Mark Murphy has similar reservations&lt;/a> about another popular app Evernote.&lt;/p>
&lt;p>The solution? I think Google should make it mandatory for app publishers to explain in the market that why their app needs each of the permissions it requests. This should be concisely explained to the user before installation and then the user-review feature of Android marketplace can take over to determine whether the explanation given is indeed satisfactory enough or not. This would, e.g., make it immediately clear to any potential Chomp SMS users why it needs the location. I&amp;rsquo;m sure this would lead to even more sales for the good and trusted apps as people like me who were skeptical of something can put their doubts to rest. At the same time, it would quickly push the russian trojan like apps down into the oblivion.&lt;/p>
&lt;p>A side effect/benefit of this approach will also be that the app authors would look at the permissions that they use more cautiously and would probably try to weed out the unnecessary ones.&lt;/p>
&lt;p>Another idea that I have in mind is more community based. I&amp;rsquo;m not sure if Google will implement the above idea or even if they do, would they make it mandatory since market already has almost a 100,000 apps without this info. BUT, if someone can take up the mantle of making a community site that documents, with the help of android users, the potential uses of all apps&amp;rsquo; permissions and also raise flags on any app having a permission without any apparent need, this would become a boon to the Android users. AppBrain, are you listening? I think this would be a good addition to your already excellent service.&lt;/p>
&lt;p>What are your ideas about solving the apps and permissions problems and removing the malware scare that looms upon us? Let me know in the comments..&lt;/p></content></item><item><title>Android vs iPhone: Security Models</title><link>https://shantanugoel.com/2010/06/25/android-vs-iphone-security-models/</link><pubDate>Fri, 25 Jun 2010 22:02:49 +0000</pubDate><guid>https://shantanugoel.com/2010/06/25/android-vs-iphone-security-models/</guid><description>&lt;p>Android and iPhone OS (iOS) have been at loggerheads for quite some time now. This is a take on which has a better security model to protect its users. I thought of writing it up because there have been a lot of discussions around me lately about which platform is more secure and I keep repeating the same points over and over at every one of them, so thought that in future I&amp;rsquo;ll just point them to this page :P&lt;/p></description><content>&lt;p>Android and iPhone OS (iOS) have been at loggerheads for quite some time now. This is a take on which has a better security model to protect its users. I thought of writing it up because there have been a lot of discussions around me lately about which platform is more secure and I keep repeating the same points over and over at every one of them, so thought that in future I&amp;rsquo;ll just point them to this page :P&lt;/p>
&lt;h3 id="disclaimer">Disclaimer:&lt;/h3>
&lt;p>A. I don&amp;rsquo;t guarantee this post to be absolutely correct as I&amp;rsquo;m no security researcher or expert but I do have some interest in this field and I&amp;rsquo;ve been a developer for some time now on different architectures and OSs especially at OS/driver level and that too in the mobile devices field, so I &amp;ldquo;might&amp;rdquo; actually be right about a few things here and there.&lt;/p>
&lt;p>B. I&amp;rsquo;m an android user myself but not of the fanboy variety. I&amp;rsquo;ll be happy to switch camps any day I get something that appeals to me better. I have love and hate points for almost all platforms available but I&amp;rsquo;m using android because &amp;ldquo;for me&amp;rdquo; it&amp;rsquo;s love points slightly outnumber the hate points.&lt;/p>
&lt;p>OK, on with the points then. Here is the table that I created for this showing points I considered and which side wins each. Don&amp;rsquo;t start flaming me though just by seeing the table :P I will be discussing the points as well below it.&lt;/p>
&lt;h3 id="security-points">Security Points:&lt;/h3>
&lt;h4 id="distribution-medium-security">Distribution Medium Security&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>iPhone&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Approval Process&lt;/td>
&lt;td>NA&lt;/td>
&lt;td>NA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Phishing&lt;/td>
&lt;td>Lose&lt;/td>
&lt;td>Win&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="local-security">Local Security&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>iPhone&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Permissions&lt;/td>
&lt;td>Win&lt;/td>
&lt;td>Lose&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Environment/Sandbox&lt;/td>
&lt;td>Tie&lt;/td>
&lt;td>Tie&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="open-vs-closed">Open vs Closed&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>iPhone&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Open Source&lt;/td>
&lt;td>Slight Win&lt;/td>
&lt;td>Lose&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="app-development-model">App Development Model&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>iPhone&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Development Model&lt;/td>
&lt;td>Slight Win&lt;/td>
&lt;td>Lose&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="damage-control">Damage Control&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>iPhone&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Kill Switch&lt;/td>
&lt;td>Tie&lt;/td>
&lt;td>Tie&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="1-distribution-medium-security">1. Distribution Medium Security:&lt;/h3>
&lt;p>Apple vets every application that is put on the app store while Google&amp;rsquo;s Market Place is unrestricted. How does this affect you security wise?&lt;/p>
&lt;h4 id="a-approval-process">a. Approval Process&lt;/h4>
&lt;p>The biggest myth is that the vetting process is what will save you from malware on app store. IT WON&amp;rsquo;T. The Apple app approval process isn&amp;rsquo;t defined anywhere but in general it just states that it checks for apps to do what they say they will do. But they don&amp;rsquo;t check the source code of the apps and static analysis of binaries can only take you so far (Heck, they have even been inept at catching a whole lot of apps that were using their disallowed private apis which can be found easily using simple tools) . So, anyone actually wanting to write a malware can do it trivially by making the malicious code to run after the app has been approved. The trigger could be time based or could even be done over the web remotely. The app could even have encrypted payloads or download new pieces of code over the web and run them. So, we can safely say that approval process is something that can&amp;rsquo;t make things secure for you that way.&lt;/p>
&lt;h4 id="b-phishing">b. Phishing&lt;/h4>
&lt;p>This is where App store can protect you if someone put an app claiming to be from someone that it isn&amp;rsquo;t. e.g. Someone could make an app that claims to be from &amp;ldquo;Bank of America&amp;rdquo;. In apple&amp;rsquo;s case, I&amp;rsquo;m 99.99% sure that the app won&amp;rsquo;t pass the screening but in Android&amp;rsquo;s case, there won&amp;rsquo;t be any hassles for it to reach the marketplace. It could be pulled soon after as google learns about it but still even one person&amp;rsquo;s damage here is much more than what would have happened on iPhone.&lt;/p>
&lt;h3 id="2-local-security">2. Local Security:&lt;/h3>
&lt;p>What about the security in the OS itself once an app is on your phone? This is an important question because 1.) As I noted above, Apple&amp;rsquo;s app screening process isn&amp;rsquo;t robust enough to catch malware 2.) People can bypass the official distribution medium easily. Android allows to install apps from other sources on most phones by just enabling an option and a huge number of people jailbreak their iPhones and get/use this capability.&lt;/p>
&lt;h4 id="a-permissions">a. Permissions&lt;/h4>
&lt;p>On Android, an app has to explicitly declare what capabilities/data of the phone it wants to access/use and the user has to explicitly give it those permissions before it is allowed to install, irrespective of from where/how this app is being installed. So, it works even if you are installing the app from your SD card and even if you have rooted your phone. On iPhone, there is no such mechanism of restricting apps. All apps are equal and can access a lot of resources unhindered without the user knowing. So, while installing a single player only game on android you can immediately be suspicious if the app is asking for internet connection or access to your contacts data but on iPhone you will not come to know about this.&lt;/p>
&lt;h4 id="b-environment">b. Environment&lt;/h4>
&lt;p>On both platforms, the apps run in their own sandboxes with unique uuids&lt;/p>
&lt;h3 id="3-open-vs-closed">3. Open vs Closed:&lt;/h3>
&lt;p>Most of the Android code is open source while for iOS, only darwin kernel and some other things like webkit etc are open source. Now, this in itself doesn&amp;rsquo;t guarantee to make Android secure but its code does get a lot of scrutiny from open source community as well as lot of other big name companies with commercial interests in Android which allows it to find and fix more bugs and loopholes than iPhone can.&lt;/p>
&lt;h3 id="4-app-development-model">4. App Development Model:&lt;/h3>
&lt;p>Most apps for Android are written in java while those in iPhone are written in C/Objective-C. While I&amp;rsquo;m myself a big time C lover (Majority of my coding is in C/CPP) but it is indeed a very unforgiving language where you need to be very careful with what you write and has much greater chances of exploits, .e.g, Buffer overflows, as compared to java (Interestingly, all the jailbreaks for iPhone OS have been done using such exploits and have been made available day 0/day 1 mostly.)&lt;/p>
&lt;h3 id="5-damage-control">5. Damage Control:&lt;/h3>
&lt;p>What if an app actually got through everything on any of these platforms and started spreading? Both of these platforms have kill switches in the hands of Google/Apple which they can use to remove such malicious apps from the users&amp;rsquo; phones remotely.&lt;/p>
&lt;h3 id="summary">Summary:&lt;/h3>
&lt;p>Well, there is no clear winner. Apple is quite good when it comes to protecting you from phishing (though that advantage goes away if you jailbreak and use alternative means to install apps) and Android has a real sound local security system (though it also has the flaw that users might not always understand why an app is requesting a certain critical permission and install it anyways). So, take your pick and let me know what you picked :) and please do tell me if I&amp;rsquo;m wrong in any of my points or missed out on something that needs to be compared.&lt;/p></content></item></channel></rss>