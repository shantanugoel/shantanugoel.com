<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacOS on</title><link>/tags/macos/</link><description>Recent content in MacOS on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 21 Aug 2020 23:07:59 +0530</lastBuildDate><atom:link href="/tags/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>A nifty window layout switcher for macOS using Hammerspoon</title><link>/2020/08/21/hammerspoon-multiscreen-window-layout-macos/</link><pubDate>Fri, 21 Aug 2020 23:07:59 +0530</pubDate><guid>/2020/08/21/hammerspoon-multiscreen-window-layout-macos/</guid><description>I&amp;rsquo;m a sucker for screen real estate, and thus I use 2 32&amp;quot; 4k monitors so I can see most of my apps&amp;rsquo; windows simultaneously, instead of switching back and forth between them.
#myworkplace is pretty lean (on cables) and mean (on screen real estate). And a lot of tileception goes on (window tiling, then local tmux tiling, then 1-2 levels of remote tmux tiling) pic.twitter.com/wCqsusBfRb
&amp;mdash; Shantanu Goel (@shantanugoel) August 10, 2020 I use the awesome Rectangle app that provides shortcuts to move/resize an app window to my liking.</description><content>&lt;p>I&amp;rsquo;m a sucker for screen real estate, and thus I use 2 32&amp;quot; 4k monitors so I can see most of my apps&amp;rsquo; windows simultaneously, instead of switching back and forth between them.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">&lt;a href="https://twitter.com/hashtag/myworkplace?src=hash&amp;amp;ref_src=twsrc%5Etfw">#myworkplace&lt;/a> is pretty lean (on cables) and mean (on screen real estate). And a lot of tileception goes on (window tiling, then local tmux tiling, then 1-2 levels of remote tmux tiling) &lt;a href="https://t.co/wCqsusBfRb">pic.twitter.com/wCqsusBfRb&lt;/a>&lt;/p>&amp;mdash; Shantanu Goel (@shantanugoel) &lt;a href="https://twitter.com/shantanugoel/status/1292863501837295616?ref_src=twsrc%5Etfw">August 10, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>I use the awesome Rectangle app that provides shortcuts to move/resize an app window to my liking. However, this goes for a toss whenever I disconnect my laptop, or reboot it. macOS can&amp;rsquo;t seem to reliably remember where to put the windows at such events and I&amp;rsquo;ve to keep playing this game of doing a lot of alt-tabs and rectangle keyboard shortcuts to get my app windows back where I like them. So, I spent some time recently to whip up a short &lt;a href="https://www.hammerspoon.org/">hammerspoon&lt;/a> script that allows me to do this easily.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> laptopScreen &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Color LCD&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> leftMonitor &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Acer ET322QK&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> rightMonitor &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;B326HK&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Define position values that don&amp;#39;t exist by default in hs.layout.*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> positions &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> leftTop &lt;span style="color:#f92672">=&lt;/span> {x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, h&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> leftBottom &lt;span style="color:#f92672">=&lt;/span> {x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, h&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rightTop &lt;span style="color:#f92672">=&lt;/span> {x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, h&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rightBottom &lt;span style="color:#f92672">=&lt;/span> {x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, h&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> layoutTripleScreen &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Google Chrome&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, rightMonitor, positions.rightBottom, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Joplin&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, rightMonitor, positions.rightTop, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Cider&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, rightMonitor, hs.layout.left50, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Google.com Mail&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, leftMonitor, positions.leftBottom, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Hangouts Chat&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, leftMonitor, positions.leftTop, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Firefox&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, leftMonitor, positions.rightTop, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;iTerm2&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, leftMonitor, positions.rightBottom, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> layoutSingleScreen &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Google Chrome&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Joplin&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Cider&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Google.com Mail&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Hangouts Chat&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Firefox&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;iTerm2&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, laptopScreen, hs.layout.maximized, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> appNames &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Google Chrome&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Joplin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Cider&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Google.com Mail&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Hangouts Chat&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Firefox&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;iTerm&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">launchApps&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, appName &lt;span style="color:#66d9ef">in&lt;/span> ipairs(appNames) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.application.launchOrFocus(appName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> menu &lt;span style="color:#f92672">=&lt;/span> hs.menubar.new()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setSingleScreen&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setTitle(&lt;span style="color:#e6db74">&amp;#34;🖥1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setTooltip(&lt;span style="color:#e6db74">&amp;#34;Single Screen Layout&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.layout.apply(layoutSingleScreen)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setTripleScreen&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setTitle(&lt;span style="color:#e6db74">&amp;#34;🖥3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setTooltip(&lt;span style="color:#e6db74">&amp;#34;Triple Screen Layout&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.layout.apply(layoutTripleScreen)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">enableMenu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setTitle(&lt;span style="color:#e6db74">&amp;#34;🖥&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setTooltip(&lt;span style="color:#e6db74">&amp;#34;No Layout&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> menu:setMenu({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Launch Apps&amp;#34;&lt;/span>, fn &lt;span style="color:#f92672">=&lt;/span> launchApps },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Set Triple Screen Layout&amp;#34;&lt;/span>, fn &lt;span style="color:#f92672">=&lt;/span> setTripleScreen },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Set Single Screen Layout&amp;#34;&lt;/span>, fn &lt;span style="color:#f92672">=&lt;/span> setSingleScreen },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enableMenu()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The script creates a list of apps that I like to be open while working and defines two layouts for them (One when monitors are connected thus giving me 3 screens, and one when I&amp;rsquo;m working solely off the laptop). It also puts a handy menu in the menubar that allows me to launch the apps or switch between various options. It also shows a number &amp;ldquo;1&amp;rdquo; or &amp;ldquo;3&amp;rdquo; adjacent to the menu icon to display what layout I&amp;rsquo;m currently using. Pretty nifty!&lt;/p>
&lt;p>&lt;img src="/img/uploads/2020/layout-switcher-menubar.png" alt="The Layout Switcher Menu">&lt;/p></content></item><item><title>Automatic notes backup on macOS with hammerspoon</title><link>/2020/03/20/hammerspoon-backup-joplin-notes-dotfiles-git-macos/</link><pubDate>Fri, 20 Mar 2020 18:25:01 +0530</pubDate><guid>/2020/03/20/hammerspoon-backup-joplin-notes-dotfiles-git-macos/</guid><description>I&amp;rsquo;m a backup nerd and like to back-up everything I do. Not just that, I like to version them too so I can go back in time to any point. git serves as a good tool for me for versioning wherever small data/text files etc are concerned and then I back this up with remote git servers like my own git server on a raspberry pi at home, a gitlab server and a github server.</description><content>&lt;p>I&amp;rsquo;m a backup nerd and like to back-up everything I do. Not just that, I like to version them too so I can go back in time to any point. &lt;code>git&lt;/code> serves as a good tool for me for versioning wherever small data/text files etc are concerned and then I back this up with remote git servers like my own git server on a raspberry pi at home, a gitlab server and a github server. Prime targets for this are my dotfiles that I edit in spacemacs and my notes that I take in &lt;a href="https://joplinapp.org/">Joplin&lt;/a>. The only issue though is that every time I change something, which is pretty often (since I&amp;rsquo;m a tinkering nerd too) I&amp;rsquo;ve to manually commit the changes and push them upstream. Apart from being all kinds of nerds, I&amp;rsquo;m an automation nerd too, which is a fancy way of saying that I am lazy, but I digress.&lt;/p>
&lt;p>So, essentially I wanted to commit and push changes to my notes, dotfiles and few other things automatically whenever I make changes. I came across a tool called &lt;a href="https://github.com/gitwatch/gitwatch">gitwatch&lt;/a>, which can help do this. But I wanted to try out some more capabilities of &lt;a href="https://www.hammerspoon.org/">Hammerspoon&lt;/a>, so I chose that as my weapon of choice for this, especially because I already use it for few other automations so that&amp;rsquo;s one (or more) less things to install/maintain/update. Hammerspoon is an extremely powerful tool for macOS. In its own words:&lt;/p>
&lt;blockquote>
&lt;p>At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting engine. What gives Hammerspoon its power is a set of extensions that expose specific pieces of system functionality, to the user.&lt;/p>
&lt;/blockquote>
&lt;p>So, the things I had to do:&lt;/p>
&lt;ul>
&lt;li>Setup the directories of my dotfiles (&lt;code>~/dotfiles/&lt;/code>) and notes (&lt;code>~/.config/Joplin-desktop/&lt;/code>) as git repositories (by running git init inside them)&lt;/li>
&lt;li>Create repositories on GitHub (and other servers as needed) to backup them to. You can create them as private if you want to. In my case, my dotfiles are public but my notes are private.&lt;/li>
&lt;li>Add the upstream repositories to your local git repositories as remotes (&lt;code>git remote add &amp;lt;somename&amp;gt; &amp;lt;remote_url&amp;gt;&lt;/code>)&lt;/li>
&lt;li>Add my ssh keys to the ssh-agent using the &lt;code>ssh-add&lt;/code> command. You can read more about this &lt;a href="https://help.github.com/en/enterprise/2.15/user/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">here&lt;/a>&lt;/li>
&lt;li>Save the below lua script to &lt;code>~/.hammerspoon/git-backup.lua&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Paths to the directories we want to backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> notes_path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/Users/shantanugoel/.config/joplin-desktop&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> dotfiles_path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/Users/shantanugoel/dotfiles&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- The primary sync function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>(path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> hs.fs.chdir(path) &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output, status &lt;span style="color:#f92672">=&lt;/span> hs.execute(&lt;span style="color:#e6db74">&amp;#34;git add . &amp;amp;&amp;amp; git commit -am update&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> status &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output, status &lt;span style="color:#f92672">=&lt;/span> hs.execute(&lt;span style="color:#e6db74">&amp;#34;git push -u origin master&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> status &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Something went wrong! No internet? Didn&amp;#39;t add ssh keys?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.notify.show(&lt;span style="color:#e6db74">&amp;#34;Notes Sync&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Git Push Error&amp;#34;&lt;/span>, output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Check if the path exists, just in case something goes wrong or you move to a new machine etc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.notify.show(&lt;span style="color:#e6db74">&amp;#34;Notes Sync&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Cannot change Path&amp;#34;&lt;/span>, notes_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">notes_sync&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sync(notes_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">dotfiles_sync&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sync(dotfiles_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Use pathwatcher to instantly sync whenever a change is made&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>notes_watcher &lt;span style="color:#f92672">=&lt;/span> hs.pathwatcher.new(notes_path, notes_sync):start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dotfiles_watcher &lt;span style="color:#f92672">=&lt;/span> hs.pathwatcher.new(dotfiles_path, dotfiles_sync):start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- If you face perf issues with pathwatcher, comment out above 2 lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- and uncomment below lines to use a timed sync instead&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Time interval is set to 5 minutes (300 seconds) here but can be changed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- as per need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- notes_timer = hs.timer.doEvery(300, notes_sync)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- dotfiles_timer = hs.timer.doEvery(300, dotfiles_sync)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Update &lt;code>~/.hammerspoon/init.lua&lt;/code> to add this line: &lt;code>local gb = require('git-backup')&lt;/code>&lt;/li>
&lt;li>Reload hammerspoon config from its menu&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve commented the code as much as I could, so hopefully it makes sense. Now, this keeps me calm and focused on all the other procrastination that I&amp;rsquo;ve got to do :D&lt;/p></content></item><item><title>Integrating SDL2 with bazel on macOS</title><link>/2019/12/31/sdl2-macos-bazel/</link><pubDate>Tue, 31 Dec 2019 02:01:05 +0530</pubDate><guid>/2019/12/31/sdl2-macos-bazel/</guid><description>Bazel Came across bazel build system recently at my new job and found it to be quite nice compared to my earlier mainstays CMake and Make. It&amp;rsquo;s fast and correct, just as their website says. But I also liked it because it&amp;rsquo;s explicit with very little magic. And it has a powerful query/tools system that allows you to really analyze your builds and dependencies in depth. Though examples in the wild are a bit less since it is a fairly recent entrant compared to its competitors.</description><content>&lt;h2 id="bazel">Bazel&lt;/h2>
&lt;p>Came across &lt;a href="https://bazel.build/">bazel&lt;/a> build system recently at my new job and found it to be quite nice compared to my earlier mainstays CMake and Make. It&amp;rsquo;s fast and correct, just as their website says. But I also liked it because it&amp;rsquo;s explicit with very little magic. And it has a powerful query/tools system that allows you to really analyze your builds and dependencies in depth. Though examples in the wild are a bit less since it is a fairly recent entrant compared to its competitors. For a personal side project, I needed to use SDL2 and it was the first time I had to use an external/pre-built library with bazel. This post documents the process I used for my own future reference and may be help some other lost soul like me. Although, the post talks about SDL2 here specifically, the same process can be used for most other external pre-compiled modules.&lt;/p>
&lt;h2 id="download--install-libsdl">Download / Install libsdl&lt;/h2>
&lt;ul>
&lt;li>Download the latest MacOS dmg file from &lt;a href="http://libsdl.org/download-2.0.php">LibSDL&lt;/a>&lt;/li>
&lt;li>Double click the downloaded dmg file&lt;/li>
&lt;li>Copy the &lt;code>SDL2.framework&lt;/code> folder over to &lt;code>/Library/Frameworks&lt;/code> path&lt;/li>
&lt;/ul>
&lt;h2 id="make-bazel-aware-of-existence-of-sdl2">Make bazel aware of existence of SDL2&lt;/h2>
&lt;p>Update your &lt;code>WORKSPACE&lt;/code> file (resides at the root of your project) with below content. This is important because bazel does all the build steps in a sandbox and one cannot depend on anything outside this sandbox. This step allows bazel to make the content present at this path available to the sandbox as a bazel repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>new_local_repository(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/Library/Frameworks/SDL2.framework&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> build_file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;external/sdl.build&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="set-up-your-sdl-library-to-be-usable-by-other-modules-in-your-project">Set up your SDL library to be usable by other modules in your project&lt;/h2>
&lt;p>Note the &lt;code>build_file&lt;/code> parameter. This tells bazel how to use this repository. This can be anything according to what you want, the path being relative to the project root. Considering the above example, create a new directory &lt;code>external&lt;/code> in the root of your project and add a new file &lt;code>sdl.BUILD&lt;/code> to it with below content.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>load(&lt;span style="color:#e6db74">&amp;#34;@rules_cc//cc:defs.bzl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cc_library&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hdrs &lt;span style="color:#f92672">=&lt;/span> glob([&lt;span style="color:#e6db74">&amp;#34;Headers/*.h&amp;#34;&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> includes &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Header&amp;#34;&lt;/span>], &lt;span style="color:#75715e"># Optional. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visibility &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;//visibility:public&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This ensures that now your other modules can depend on SDL2 using &lt;code>@sdl2&lt;/code>. The visibility option can be tweaked as per individual needs.&lt;/p>
&lt;h2 id="use-sdl2">Use SDL2&lt;/h2>
&lt;p>Update the &lt;code>BUILD&lt;/code> file of the module where you want to use SDL2 with below contents.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>load(&lt;span style="color:#e6db74">&amp;#34;@rules_cc//cc:defs.bzl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cc_library&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;some_module&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> srcs &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;some_source.cc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Optional: copts can be avoided if includes was set in sdl.BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copts &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-Iexternal/sdl2/Headers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> linkopts &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-F/Library/Frameworks&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-framework SDL2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deps &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;@sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important portions here are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>copts&lt;/code>: To let bazel know where to search for SDL2 header files. Note that the path here is relative to project root.&lt;/li>
&lt;li>&lt;code>linkopts&lt;/code>: Need the &lt;code>-F&lt;/code> option to let compiler know where to search for the framework files and &lt;code>-framework&lt;/code> option as usual to link to ZSDL2. The path with &lt;code>-F&lt;/code> can be absolute one. Not sure why this is not restricted by the sandbox. Investigating this currently.&lt;/li>
&lt;li>&lt;code>deps&lt;/code>: Finally, create the explicit dependency on your sdl2 module by referring to it as &lt;code>@sdl2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>By now, the project is ready to be compiled and linked.&lt;/p></content></item></channel></rss>