<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bazel on</title><link>/tags/bazel/</link><description>Recent content in Bazel on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 03 May 2020 11:02:30 +0530</lastBuildDate><atom:link href="/tags/bazel/index.xml" rel="self" type="application/rss+xml"/><item><title>Bazel rules to auto generate files at compile time</title><link>/2020/05/03/bazel-rule-auto-generate-files-compile-time/</link><pubDate>Sun, 03 May 2020 11:02:30 +0530</pubDate><guid>/2020/05/03/bazel-rule-auto-generate-files-compile-time/</guid><description>Auto generated files in a project are pretty common. There are generally 3 scenarios for this in a project that needs auto-generated files:
An external pre-built tool generates files pre-compilation and then the generated files get checked in to the tree The tool is compiled in-tree but is again used to generate files pre-compilation and then check them into tree The tool is built during the main build step and then it also generates the needed files just in time.</description><content>&lt;p>Auto generated files in a project are pretty common. There are generally 3 scenarios for this in a project that needs auto-generated files:&lt;/p>
&lt;ul>
&lt;li>An external pre-built tool generates files pre-compilation and then the generated files get checked in to the tree&lt;/li>
&lt;li>The tool is compiled in-tree but is again used to generate files pre-compilation and then check them into tree&lt;/li>
&lt;li>The tool is built during the main build step and then it also generates the needed files just in time.&lt;/li>
&lt;/ul>
&lt;p>Arguably, the last method is usually the better one since it keeps friction to a minimum during development by always generating latest files according to any changes done locally and also prevents against the human error of someone foregetting to commit the separately generated files, or having a time period where the tree is out of sync because the generated files and hand written files were committed separately. There is a con as well that such files are not available for someone going through the code statically for understanding or debugging. But one could always couple both methods if so desired.&lt;/p>
&lt;p>I had a need to generate some files for a side project of mine recently and I thought of listing down the way I achieve this with bazel, particularly the last mechanism mentioned above. So, our (simplified) problem statement is:&lt;/p>
&lt;ul>
&lt;li>Our primary code is in &lt;code>main.cc&lt;/code> which needs to include an auto-generated header file &lt;code>header.h&lt;/code>.&lt;/li>
&lt;li>&lt;code>header.h&lt;/code> is generated by running a tool &lt;code>header_generator&lt;/code>.&lt;/li>
&lt;li>&lt;code>header_generator&lt;/code> is built by compiling &lt;code>header_generator.cc&lt;/code>.&lt;/li>
&lt;li>We only want to run a single build step of building our primary target. Rest should happen on its own flowing through the dependency logic.&lt;/li>
&lt;/ul>
&lt;p>To achieve this, we should move in the reverse dependency order. First, let&amp;rsquo;s define the straight forward target of &lt;code>header_generator&lt;/code>. This target does not have any dependency and can build standalonea as well.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cc_binary(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;header_generator&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> srcs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;header_generator.cc&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, we define a target that will generate our library that builds &lt;code>header.h&lt;/code>. If this was a hand-written or pre-generated file, the target would&amp;rsquo;ve been simply:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;header&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hdrs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;header.h&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But this file does not exist in our tree and so bazel wouldn&amp;rsquo;t know how to make sense of it. So, we replace the &lt;code>hdrs&lt;/code> field of the library with another target (&lt;a href="https://docs.bazel.build/versions/master/be/general.html#genrule">genrule&lt;/a>) instead, which generates a rule on the fly.&lt;/p>
&lt;blockquote>
&lt;p>Bazel documentation: A genrule generates one or more files using a user-defined Bash command. Genrules are generic build rules that you can use if there&amp;rsquo;s no specific rule for the task.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>genrule(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;generate_header&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;header.h&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./$(location :header_generator) &amp;gt; $@&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tools &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;:header_generator&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;header&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hdrs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;:generate_header&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This target runs the command specified in the &lt;code>cmd&lt;/code> property as a bash command. The command uses the tool label mentioned in the tools property to figure out any tools&amp;rsquo; targets that need to be built before running this. &lt;code>location&lt;/code> attribute is used to refer to the final compiled binary of the associated tool and then it redirects the output to the filename mentioned in &lt;code>outs&lt;/code> property.&lt;/p>
&lt;p>Finally, we just plumb this with our primary target normally, making it dependent on the target that contains the generated header file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cc_binary(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> srcs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;main.cc&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deps &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;:header&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With these set of rules, whenever I run &lt;code>bazel run //src:main&lt;/code>, bazel will first compile the &lt;code>header_generator&lt;/code> binary, then run this binary to generate &lt;code>header.h&lt;/code> file and finally compile &lt;code>main.cc&lt;/code> along with these depdenencies and then run the final binary.&lt;/p></content></item><item><title>Integrating SDL2 with bazel on macOS</title><link>/2019/12/31/sdl2-macos-bazel/</link><pubDate>Tue, 31 Dec 2019 02:01:05 +0530</pubDate><guid>/2019/12/31/sdl2-macos-bazel/</guid><description>Bazel Came across bazel build system recently at my new job and found it to be quite nice compared to my earlier mainstays CMake and Make. It&amp;rsquo;s fast and correct, just as their website says. But I also liked it because it&amp;rsquo;s explicit with very little magic. And it has a powerful query/tools system that allows you to really analyze your builds and dependencies in depth. Though examples in the wild are a bit less since it is a fairly recent entrant compared to its competitors.</description><content>&lt;h2 id="bazel">Bazel&lt;/h2>
&lt;p>Came across &lt;a href="https://bazel.build/">bazel&lt;/a> build system recently at my new job and found it to be quite nice compared to my earlier mainstays CMake and Make. It&amp;rsquo;s fast and correct, just as their website says. But I also liked it because it&amp;rsquo;s explicit with very little magic. And it has a powerful query/tools system that allows you to really analyze your builds and dependencies in depth. Though examples in the wild are a bit less since it is a fairly recent entrant compared to its competitors. For a personal side project, I needed to use SDL2 and it was the first time I had to use an external/pre-built library with bazel. This post documents the process I used for my own future reference and may be help some other lost soul like me. Although, the post talks about SDL2 here specifically, the same process can be used for most other external pre-compiled modules.&lt;/p>
&lt;h2 id="download--install-libsdl">Download / Install libsdl&lt;/h2>
&lt;ul>
&lt;li>Download the latest MacOS dmg file from &lt;a href="http://libsdl.org/download-2.0.php">LibSDL&lt;/a>&lt;/li>
&lt;li>Double click the downloaded dmg file&lt;/li>
&lt;li>Copy the &lt;code>SDL2.framework&lt;/code> folder over to &lt;code>/Library/Frameworks&lt;/code> path&lt;/li>
&lt;/ul>
&lt;h2 id="make-bazel-aware-of-existence-of-sdl2">Make bazel aware of existence of SDL2&lt;/h2>
&lt;p>Update your &lt;code>WORKSPACE&lt;/code> file (resides at the root of your project) with below content. This is important because bazel does all the build steps in a sandbox and one cannot depend on anything outside this sandbox. This step allows bazel to make the content present at this path available to the sandbox as a bazel repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>new_local_repository(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/Library/Frameworks/SDL2.framework&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> build_file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;external/sdl.build&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="set-up-your-sdl-library-to-be-usable-by-other-modules-in-your-project">Set up your SDL library to be usable by other modules in your project&lt;/h2>
&lt;p>Note the &lt;code>build_file&lt;/code> parameter. This tells bazel how to use this repository. This can be anything according to what you want, the path being relative to the project root. Considering the above example, create a new directory &lt;code>external&lt;/code> in the root of your project and add a new file &lt;code>sdl.BUILD&lt;/code> to it with below content.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>load(&lt;span style="color:#e6db74">&amp;#34;@rules_cc//cc:defs.bzl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cc_library&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hdrs &lt;span style="color:#f92672">=&lt;/span> glob([&lt;span style="color:#e6db74">&amp;#34;Headers/*.h&amp;#34;&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> includes &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Header&amp;#34;&lt;/span>], &lt;span style="color:#75715e"># Optional. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visibility &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;//visibility:public&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This ensures that now your other modules can depend on SDL2 using &lt;code>@sdl2&lt;/code>. The visibility option can be tweaked as per individual needs.&lt;/p>
&lt;h2 id="use-sdl2">Use SDL2&lt;/h2>
&lt;p>Update the &lt;code>BUILD&lt;/code> file of the module where you want to use SDL2 with below contents.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>load(&lt;span style="color:#e6db74">&amp;#34;@rules_cc//cc:defs.bzl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cc_library&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cc_library(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;some_module&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> srcs &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;some_source.cc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Optional: copts can be avoided if includes was set in sdl.BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copts &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-Iexternal/sdl2/Headers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> linkopts &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-F/Library/Frameworks&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-framework SDL2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deps &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;@sdl2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important portions here are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>copts&lt;/code>: To let bazel know where to search for SDL2 header files. Note that the path here is relative to project root.&lt;/li>
&lt;li>&lt;code>linkopts&lt;/code>: Need the &lt;code>-F&lt;/code> option to let compiler know where to search for the framework files and &lt;code>-framework&lt;/code> option as usual to link to ZSDL2. The path with &lt;code>-F&lt;/code> can be absolute one. Not sure why this is not restricted by the sandbox. Investigating this currently.&lt;/li>
&lt;li>&lt;code>deps&lt;/code>: Finally, create the explicit dependency on your sdl2 module by referring to it as &lt;code>@sdl2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>By now, the project is ready to be compiled and linked.&lt;/p></content></item></channel></rss>